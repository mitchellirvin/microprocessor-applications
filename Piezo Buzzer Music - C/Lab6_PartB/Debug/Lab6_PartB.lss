
Lab6_PartB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00802000  000018e8  0000197c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802120  00802120  00001a9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003124  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000390  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00005dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a90  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001113  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00007c27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d4:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_53>
      d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	11 e2       	ldi	r17, 0x21	; 33
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ee       	ldi	r30, 0xE8	; 232
     21c:	f8 e1       	ldi	r31, 0x18	; 24
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 32       	cpi	r26, 0x20	; 32
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a0 e2       	ldi	r26, 0x20	; 32
     234:	b1 e2       	ldi	r27, 0x21	; 33
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a2 32       	cpi	r26, 0x22	; 34
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 42 08 	call	0x1084	; 0x1084 <main>
     244:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <TCE0_init>:

void RoughDelay1sec(void)
{
	volatile uint32_t ticks;            //Volatile prevents compiler optimization
	for(ticks = 0; ticks <= F_CPU; ticks++);	//increment 2e6 times -> ~ 1 sec
}
     24c:	e0 e8       	ldi	r30, 0x80	; 128
     24e:	f6 e0       	ldi	r31, 0x06	; 6
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	82 83       	std	Z+2, r24	; 0x02
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	91 83       	std	Z+1, r25	; 0x01
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	fa e0       	ldi	r31, 0x0A	; 10
     25c:	80 83       	st	Z, r24
     25e:	81 e2       	ldi	r24, 0x21	; 33
     260:	81 83       	std	Z+1, r24	; 0x01
     262:	13 82       	std	Z+3, r1	; 0x03
     264:	14 82       	std	Z+4, r1	; 0x04
     266:	80 e8       	ldi	r24, 0x80	; 128
     268:	81 87       	std	Z+9, r24	; 0x09
     26a:	08 95       	ret

0000026c <TCE1_init>:
     26c:	e0 e4       	ldi	r30, 0x40	; 64
     26e:	fa e0       	ldi	r31, 0x0A	; 10
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	80 83       	st	Z, r24
     274:	11 82       	std	Z+1, r1	; 0x01
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	84 e8       	ldi	r24, 0x84	; 132
     27c:	9e e1       	ldi	r25, 0x1E	; 30
     27e:	86 a3       	std	Z+38, r24	; 0x26
     280:	97 a3       	std	Z+39, r25	; 0x27
     282:	08 95       	ret

00000284 <TCE0_quit>:
     284:	e0 e0       	ldi	r30, 0x00	; 0
     286:	fa e0       	ldi	r31, 0x0A	; 10
     288:	10 82       	st	Z, r1
     28a:	11 82       	std	Z+1, r1	; 0x01
     28c:	10 a6       	std	Z+40, r1	; 0x28
     28e:	11 a6       	std	Z+41, r1	; 0x29
     290:	08 95       	ret

00000292 <EBI_init>:
	outString(freq);
}

void EBI_init()
{
	PORTH.DIR = 0x37;       // Enable RE, WE, CS0, CS1, ALE1
     292:	e0 ee       	ldi	r30, 0xE0	; 224
     294:	f6 e0       	ldi	r31, 0x06	; 6
     296:	87 e3       	ldi	r24, 0x37	; 55
     298:	80 83       	st	Z, r24
	PORTH.OUT = 0x33;		// activation levels
     29a:	83 e3       	ldi	r24, 0x33	; 51
     29c:	84 83       	std	Z+4, r24	; 0x04
	PORTK.DIR = 0xFF;       // Enable Address 7:0 (outputs)
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	// Do not need to set PortJ to outputs
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;            // ALE1 multiplexing, 3 port configuration
     2a4:	e0 e4       	ldi	r30, 0x40	; 64
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 83       	st	Z, r24

	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
     2ac:	88 e2       	ldi	r24, 0x28	; 40
     2ae:	83 8b       	std	Z+19, r24	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;            // Set CS0 range to 0x288000 - 0x289FFF
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	82 8b       	std	Z+18, r24	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;	    // SRAM mode, 8k address space
     2b4:	85 e1       	ldi	r24, 0x15	; 21
     2b6:	80 8b       	std	Z+16, r24	; 0x10

	// BASEADDR is 16 bit (word) register. C interface allows you to set low and high parts with 1
	// instruction instead of the previous two
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;          // Set CS1 range to 0x394000 - 0x397FFF
     2b8:	80 e4       	ldi	r24, 0x40	; 64
     2ba:	99 e3       	ldi	r25, 0x39	; 57
     2bc:	86 8b       	std	Z+22, r24	; 0x16
     2be:	97 8b       	std	Z+23, r25	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_16KB_gc;	//16k size SRAM mode
     2c0:	89 e1       	ldi	r24, 0x19	; 25
     2c2:	84 8b       	std	Z+20, r24	; 0x14
     2c4:	08 95       	ret

000002c6 <keypad_init>:
}

void keypad_init() {
	//first, set upper 4 bits of PORTE as output
	PORTF.DIR = 0x0F;
     2c6:	e0 ea       	ldi	r30, 0xA0	; 160
     2c8:	f6 e0       	ldi	r31, 0x06	; 6
     2ca:	8f e0       	ldi	r24, 0x0F	; 15
     2cc:	80 83       	st	Z, r24
	//then set lower 4 bits to have internal pull-up resistors
	//we will write 0 to the column we are checking and will be
	//checking to see if a row is 0 to determine a key press
	PORTF.PIN4CTRL = 0x18;
     2ce:	88 e1       	ldi	r24, 0x18	; 24
     2d0:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = 0x18;
     2d2:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = 0x18;
     2d4:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = 0x18;
     2d6:	87 8b       	std	Z+23, r24	; 0x17
     2d8:	08 95       	ret

000002da <keypad_scan>:
}

int keypad_scan() {
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	aa 97       	sbiw	r28, 0x2a	; 42
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	de bf       	out	0x3e, r29	; 62
	//values to write to PORTF_OUT to check each column
	//in order from row1 to row4
	uint16_t rows[] = {0x0E, 0x0D, 0x0B, 0x07};
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	e0 e0       	ldi	r30, 0x00	; 0
     304:	f0 e2       	ldi	r31, 0x20	; 32
     306:	de 01       	movw	r26, r28
     308:	11 96       	adiw	r26, 0x01	; 1
     30a:	01 90       	ld	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	8a 95       	dec	r24
     310:	e1 f7       	brne	.-8      	; 0x30a <keypad_scan+0x30>
	//values to compare PORTE_IN to after writing to PORTF_OUT
	uint16_t col1[] = {0x7E, 0xBE, 0xDE, 0xEE};
     312:	88 e0       	ldi	r24, 0x08	; 8
     314:	e8 e0       	ldi	r30, 0x08	; 8
     316:	f0 e2       	ldi	r31, 0x20	; 32
     318:	de 01       	movw	r26, r28
     31a:	19 96       	adiw	r26, 0x09	; 9
     31c:	01 90       	ld	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	8a 95       	dec	r24
     322:	e1 f7       	brne	.-8      	; 0x31c <keypad_scan+0x42>
	uint16_t col2[] = {0x7D, 0xBD, 0xDD, 0xED};
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	e0 e1       	ldi	r30, 0x10	; 16
     328:	f0 e2       	ldi	r31, 0x20	; 32
     32a:	de 01       	movw	r26, r28
     32c:	51 96       	adiw	r26, 0x11	; 17
     32e:	01 90       	ld	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	8a 95       	dec	r24
     334:	e1 f7       	brne	.-8      	; 0x32e <keypad_scan+0x54>
	uint16_t col3[] = {0x7B, 0xBB, 0xDB, 0xEB};
     336:	88 e0       	ldi	r24, 0x08	; 8
     338:	e8 e1       	ldi	r30, 0x18	; 24
     33a:	f0 e2       	ldi	r31, 0x20	; 32
     33c:	de 01       	movw	r26, r28
     33e:	59 96       	adiw	r26, 0x19	; 25
     340:	01 90       	ld	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	8a 95       	dec	r24
     346:	e1 f7       	brne	.-8      	; 0x340 <keypad_scan+0x66>
	uint16_t col4[] = {0x77, 0xB7, 0xD7, 0xE7};
     348:	88 e0       	ldi	r24, 0x08	; 8
     34a:	e0 e2       	ldi	r30, 0x20	; 32
     34c:	f0 e2       	ldi	r31, 0x20	; 32
     34e:	de 01       	movw	r26, r28
     350:	91 96       	adiw	r26, 0x21	; 33
     352:	01 90       	ld	r0, Z+
     354:	0d 92       	st	X+, r0
     356:	8a 95       	dec	r24
     358:	e1 f7       	brne	.-8      	; 0x352 <keypad_scan+0x78>
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
     35a:	19 a6       	std	Y+41, r1	; 0x29
     35c:	1a a6       	std	Y+42, r1	; 0x2a
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
     35e:	c9 a0       	ldd	r12, Y+33	; 0x21
     360:	da a0       	ldd	r13, Y+34	; 0x22
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
     362:	a9 8c       	ldd	r10, Y+25	; 0x19
     364:	ba 8c       	ldd	r11, Y+26	; 0x1a
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
     366:	89 88       	ldd	r8, Y+17	; 0x11
     368:	9a 88       	ldd	r9, Y+18	; 0x12
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
     36a:	69 84       	ldd	r6, Y+9	; 0x09
     36c:	7a 84       	ldd	r7, Y+10	; 0x0a
     36e:	de 01       	movw	r26, r28
     370:	11 96       	adiw	r26, 0x01	; 1
     372:	01 e0       	ldi	r16, 0x01	; 1
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
	
	for(int i = 0; i < 4; i++) {
		//write to output the column that we're currently checking
		PORTF.OUT = rows[i];
     37a:	0f 2e       	mov	r0, r31
     37c:	f0 ea       	ldi	r31, 0xA0	; 160
     37e:	ef 2e       	mov	r14, r31
     380:	f6 e0       	ldi	r31, 0x06	; 6
     382:	ff 2e       	mov	r15, r31
     384:	f0 2d       	mov	r31, r0
     386:	04 c0       	rjmp	.+8      	; 0x390 <keypad_scan+0xb6>
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	0f 5f       	subi	r16, 0xFF	; 255
     38e:	1f 4f       	sbci	r17, 0xFF	; 255
     390:	8c 91       	ld	r24, X
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	f7 01       	movw	r30, r14
     396:	84 83       	std	Z+4, r24	; 0x04
		//two nops to give time to get proper input read
		asm volatile ("nop");
     398:	00 00       	nop
		asm volatile ("nop");
     39a:	00 00       	nop
		//read from PORTE_IN
		input = PORTF.IN;
     39c:	80 85       	ldd	r24, Z+8	; 0x08
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	89 a7       	std	Y+41, r24	; 0x29
     3a2:	9a a7       	std	Y+42, r25	; 0x2a
		//if on first column
		if(i == 0){
     3a4:	61 15       	cp	r22, r1
     3a6:	71 05       	cpc	r23, r1
     3a8:	31 f5       	brne	.+76     	; 0x3f6 <keypad_scan+0x11c>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
     3aa:	89 a5       	ldd	r24, Y+41	; 0x29
     3ac:	9a a5       	ldd	r25, Y+42	; 0x2a
     3ae:	68 16       	cp	r6, r24
     3b0:	79 06       	cpc	r7, r25
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <keypad_scan+0xdc>
     3b4:	98 c0       	rjmp	.+304    	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
     3b6:	fe 01       	movw	r30, r28
     3b8:	3b 96       	adiw	r30, 0x0b	; 11
		//read from PORTE_IN
		input = PORTF.IN;
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col1
				if(input == col1[j]) {
     3be:	21 91       	ld	r18, Z+
     3c0:	31 91       	ld	r19, Z+
     3c2:	89 a5       	ldd	r24, Y+41	; 0x29
     3c4:	9a a5       	ldd	r25, Y+42	; 0x2a
     3c6:	28 17       	cp	r18, r24
     3c8:	39 07       	cpc	r19, r25
     3ca:	79 f4       	brne	.+30     	; 0x3ea <keypad_scan+0x110>
					if(j == 3) {
     3cc:	43 30       	cpi	r20, 0x03	; 3
     3ce:	51 05       	cpc	r21, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <keypad_scan+0xfa>
     3d2:	8c c0       	rjmp	.+280    	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
						return 1; //if 'A'
						} else if(j == 2) {
     3d4:	42 30       	cpi	r20, 0x02	; 2
     3d6:	51 05       	cpc	r21, r1
     3d8:	09 f4       	brne	.+2      	; 0x3dc <keypad_scan+0x102>
     3da:	8b c0       	rjmp	.+278    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
						return 4;
						} else if(j == 1) {
     3dc:	41 30       	cpi	r20, 0x01	; 1
     3de:	51 05       	cpc	r21, r1
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <keypad_scan+0x10a>
     3e2:	8a c0       	rjmp	.+276    	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
						return 7;
						} else {
						return 14;
     3e4:	8e e0       	ldi	r24, 0x0E	; 14
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	ad c0       	rjmp	.+346    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
		//read from PORTE_IN
		input = PORTF.IN;
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
     3ea:	4f 5f       	subi	r20, 0xFF	; 255
     3ec:	5f 4f       	sbci	r21, 0xFF	; 255
     3ee:	44 30       	cpi	r20, 0x04	; 4
     3f0:	51 05       	cpc	r21, r1
     3f2:	29 f7       	brne	.-54     	; 0x3be <keypad_scan+0xe4>
     3f4:	c9 cf       	rjmp	.-110    	; 0x388 <keypad_scan+0xae>
					}
				}
			}
		}
		//if on second column
		else if(i == 1){
     3f6:	61 30       	cpi	r22, 0x01	; 1
     3f8:	71 05       	cpc	r23, r1
     3fa:	31 f5       	brne	.+76     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
     3fc:	89 a5       	ldd	r24, Y+41	; 0x29
     3fe:	9a a5       	ldd	r25, Y+42	; 0x2a
     400:	88 16       	cp	r8, r24
     402:	99 06       	cpc	r9, r25
     404:	09 f4       	brne	.+2      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     406:	7b c0       	rjmp	.+246    	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     408:	fe 01       	movw	r30, r28
     40a:	73 96       	adiw	r30, 0x13	; 19
			}
		}
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
     40c:	41 e0       	ldi	r20, 0x01	; 1
     40e:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col2
				if(input == col2[j]) {
     410:	21 91       	ld	r18, Z+
     412:	31 91       	ld	r19, Z+
     414:	89 a5       	ldd	r24, Y+41	; 0x29
     416:	9a a5       	ldd	r25, Y+42	; 0x2a
     418:	28 17       	cp	r18, r24
     41a:	39 07       	cpc	r19, r25
     41c:	79 f4       	brne	.+30     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
					if(j == 3) {
     41e:	43 30       	cpi	r20, 0x03	; 3
     420:	51 05       	cpc	r21, r1
     422:	09 f4       	brne	.+2      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     424:	6f c0       	rjmp	.+222    	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
						return 2;
						} else if (j == 2) {
     426:	42 30       	cpi	r20, 0x02	; 2
     428:	51 05       	cpc	r21, r1
     42a:	09 f4       	brne	.+2      	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
     42c:	6e c0       	rjmp	.+220    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
						return 5;
						} else if(j == 1) {
     42e:	41 30       	cpi	r20, 0x01	; 1
     430:	51 05       	cpc	r21, r1
     432:	09 f4       	brne	.+2      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     434:	6d c0       	rjmp	.+218    	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
						return 8;
						} else {
						return 0;
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	84 c0       	rjmp	.+264    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			}
		}
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
     43c:	4f 5f       	subi	r20, 0xFF	; 255
     43e:	5f 4f       	sbci	r21, 0xFF	; 255
     440:	44 30       	cpi	r20, 0x04	; 4
     442:	51 05       	cpc	r21, r1
     444:	29 f7       	brne	.-54     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     446:	a0 cf       	rjmp	.-192    	; 0x388 <keypad_scan+0xae>
					}
				}
			}
		}
		//if on third column
		else if(i == 2){
     448:	62 30       	cpi	r22, 0x02	; 2
     44a:	71 05       	cpc	r23, r1
     44c:	31 f0       	breq	.+12     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
     44e:	89 a5       	ldd	r24, Y+41	; 0x29
     450:	9a a5       	ldd	r25, Y+42	; 0x2a
     452:	c8 16       	cp	r12, r24
     454:	d9 06       	cpc	r13, r25
     456:	39 f5       	brne	.+78     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     458:	5e c0       	rjmp	.+188    	; 0x516 <__FUSE_REGION_LENGTH__+0x116>
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
     45a:	89 a5       	ldd	r24, Y+41	; 0x29
     45c:	9a a5       	ldd	r25, Y+42	; 0x2a
     45e:	a8 16       	cp	r10, r24
     460:	b9 06       	cpc	r11, r25
     462:	09 f4       	brne	.+2      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     464:	5b c0       	rjmp	.+182    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
     466:	fe 01       	movw	r30, r28
     468:	7b 96       	adiw	r30, 0x1b	; 27
			}
		}
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col3
				if(input == col3[j]) {
     46e:	21 91       	ld	r18, Z+
     470:	31 91       	ld	r19, Z+
     472:	89 a5       	ldd	r24, Y+41	; 0x29
     474:	9a a5       	ldd	r25, Y+42	; 0x2a
     476:	28 17       	cp	r18, r24
     478:	39 07       	cpc	r19, r25
     47a:	79 f4       	brne	.+30     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
					if(j == 3) {
     47c:	43 30       	cpi	r20, 0x03	; 3
     47e:	51 05       	cpc	r21, r1
     480:	09 f4       	brne	.+2      	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
     482:	4f c0       	rjmp	.+158    	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
						return 3;
						} else if(j == 2) {
     484:	42 30       	cpi	r20, 0x02	; 2
     486:	51 05       	cpc	r21, r1
     488:	09 f4       	brne	.+2      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     48a:	4e c0       	rjmp	.+156    	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
						return 6;
						} else if(j == 1) {
     48c:	41 30       	cpi	r20, 0x01	; 1
     48e:	51 05       	cpc	r21, r1
     490:	09 f4       	brne	.+2      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     492:	4d c0       	rjmp	.+154    	; 0x52e <__FUSE_REGION_LENGTH__+0x12e>
						return 9;
						} else {
						return 15;
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	55 c0       	rjmp	.+170    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			}
		}
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
     49a:	4f 5f       	subi	r20, 0xFF	; 255
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	44 30       	cpi	r20, 0x04	; 4
     4a0:	51 05       	cpc	r21, r1
     4a2:	29 f7       	brne	.-54     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     4a4:	71 cf       	rjmp	.-286    	; 0x388 <keypad_scan+0xae>
     4a6:	fe 01       	movw	r30, r28
     4a8:	b3 96       	adiw	r30, 0x23	; 35
			}
		}
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
				//compare input to our expected vals for col4
				if(input == col4[j]) {
     4ae:	41 91       	ld	r20, Z+
     4b0:	51 91       	ld	r21, Z+
     4b2:	29 a5       	ldd	r18, Y+41	; 0x29
     4b4:	3a a5       	ldd	r19, Y+42	; 0x2a
     4b6:	42 17       	cp	r20, r18
     4b8:	53 07       	cpc	r21, r19
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
					if(j == 0) {
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	d1 f1       	breq	.+116    	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
						return 13;
						} else if(j == 1) {
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	91 05       	cpc	r25, r1
     4c4:	d1 f1       	breq	.+116    	; 0x53a <__FUSE_REGION_LENGTH__+0x13a>
						return 12;
						} else if(j == 2) {
     4c6:	02 97       	sbiw	r24, 0x02	; 2
     4c8:	d9 f1       	breq	.+118    	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
						return 11;
						} else {
						return 10;
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	3a c0       	rjmp	.+116    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			}
		}
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	84 30       	cpi	r24, 0x04	; 4
     4d4:	91 05       	cpc	r25, r1
     4d6:	59 f7       	brne	.-42     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	uint16_t col3[] = {0x7B, 0xBB, 0xDB, 0xEB};
	uint16_t col4[] = {0x77, 0xB7, 0xD7, 0xE7};
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
	
	for(int i = 0; i < 4; i++) {
     4d8:	04 30       	cpi	r16, 0x04	; 4
     4da:	11 05       	cpc	r17, r1
     4dc:	0c f4       	brge	.+2      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
     4de:	54 cf       	rjmp	.-344    	; 0x388 <keypad_scan+0xae>
				}
			}
		}
	} //end for loop (writing to each column)
	//no key pressed, return default value of 16
	return 16;
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	2f c0       	rjmp	.+94     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 2) {
						return 4;
						} else if(j == 1) {
						return 7;
						} else {
						return 14;
     4e6:	8e e0       	ldi	r24, 0x0E	; 14
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	2c c0       	rjmp	.+88     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
					if(j == 3) {
						return 1; //if 'A'
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	29 c0       	rjmp	.+82     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 2) {
						return 4;
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	26 c0       	rjmp	.+76     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 1) {
						return 7;
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	23 c0       	rjmp	.+70     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if (j == 2) {
						return 5;
						} else if(j == 1) {
						return 8;
						} else {
						return 0;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	20 c0       	rjmp	.+64     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
					if(j == 3) {
						return 2;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	1d c0       	rjmp	.+58     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if (j == 2) {
						return 5;
     50a:	85 e0       	ldi	r24, 0x05	; 5
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	1a c0       	rjmp	.+52     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 1) {
						return 8;
     510:	88 e0       	ldi	r24, 0x08	; 8
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	17 c0       	rjmp	.+46     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
					if(j == 0) {
						return 13;
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	14 c0       	rjmp	.+40     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 2) {
						return 6;
						} else if(j == 1) {
						return 9;
						} else {
						return 15;
     51c:	8f e0       	ldi	r24, 0x0F	; 15
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	11 c0       	rjmp	.+34     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
					if(j == 3) {
						return 3;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e c0       	rjmp	.+28     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 2) {
						return 6;
     528:	86 e0       	ldi	r24, 0x06	; 6
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0b c0       	rjmp	.+22     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 1) {
						return 9;
     52e:	89 e0       	ldi	r24, 0x09	; 9
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	08 c0       	rjmp	.+16     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
					if(j == 0) {
						return 13;
     534:	8d e0       	ldi	r24, 0x0D	; 13
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	05 c0       	rjmp	.+10     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 1) {
						return 12;
     53a:	8c e0       	ldi	r24, 0x0C	; 12
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
						} else if(j == 2) {
						return 11;
     540:	8b e0       	ldi	r24, 0x0B	; 11
     542:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	} //end for loop (writing to each column)
	//no key pressed, return default value of 16
	return 16;
} //end keypad_scan
     544:	aa 96       	adiw	r28, 0x2a	; 42
     546:	cd bf       	out	0x3d, r28	; 61
     548:	de bf       	out	0x3e, r29	; 62
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	7f 90       	pop	r7
     564:	6f 90       	pop	r6
     566:	08 95       	ret

00000568 <pollBusy>:

void pollBusy()
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	//create variable to hold data read from LCD
	volatile uint8_t readLCD_8;
	
	//allow two cycles for busy flag to be set
	//as said in part A section 4 of lab doc
	asm volatile ("nop");
     572:	00 00       	nop
	asm volatile ("nop");
     574:	00 00       	nop
	
	// read to determine if DB7 is still set
	readLCD_8 = __far_mem_read(LCD_Command);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e5       	ldi	r25, 0x50	; 80
     57a:	a9 e3       	ldi	r26, 0x39	; 57
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	0b b6       	in	r0, 0x3b	; 59
     580:	ab bf       	out	0x3b, r26	; 59
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	0b be       	out	0x3b, r0	; 59
     588:	89 83       	std	Y+1, r24	; 0x01

	//while DB7 is set, read and check new value
	//this will spin until the busy flag is no longer 1
	while(readLCD_8 > 0x7F){
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 23       	and	r24, r24
     58e:	6c f4       	brge	.+26     	; 0x5aa <pollBusy+0x42>
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e5       	ldi	r21, 0x50	; 80
     594:	69 e3       	ldi	r22, 0x39	; 57
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	6b bf       	out	0x3b, r22	; 59
     59c:	fa 01       	movw	r30, r20
     59e:	80 81       	ld	r24, Z
     5a0:	0b be       	out	0x3b, r0	; 59
     5a2:	89 83       	std	Y+1, r24	; 0x01
	// read to determine if DB7 is still set
	readLCD_8 = __far_mem_read(LCD_Command);

	//while DB7 is set, read and check new value
	//this will spin until the busy flag is no longer 1
	while(readLCD_8 > 0x7F){
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	88 23       	and	r24, r24
     5a8:	bc f3       	brlt	.-18     	; 0x598 <pollBusy+0x30>
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
	}
}
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <LCD_init>:
	for(ticks = 0; ticks <= F_CPU; ticks++);	//increment 2e6 times -> ~ 1 sec
}

void LCD_init() {
	//Normal Further LCD Initialization - LCD_Notes_8-bit.pdf
	pollBusy(); 
     5b2:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	__far_mem_write(LCD_Command, 0x38);	//two lines
     5b6:	28 e3       	ldi	r18, 0x38	; 56
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e5       	ldi	r25, 0x50	; 80
     5bc:	a9 e3       	ldi	r26, 0x39	; 57
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	0b b6       	in	r0, 0x3b	; 59
     5c2:	ab bf       	out	0x3b, r26	; 59
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 83       	st	Z, r18
     5c8:	0b be       	out	0x3b, r0	; 59
	pollBusy();
     5ca:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	__far_mem_write(LCD_Command, 0x0F); //display on; cursor on; blink on
     5ce:	2f e0       	ldi	r18, 0x0F	; 15
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e5       	ldi	r25, 0x50	; 80
     5d4:	a9 e3       	ldi	r26, 0x39	; 57
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	0b b6       	in	r0, 0x3b	; 59
     5da:	ab bf       	out	0x3b, r26	; 59
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
     5e0:	0b be       	out	0x3b, r0	; 59
	pollBusy();
     5e2:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e5       	ldi	r25, 0x50	; 80
     5ec:	a9 e3       	ldi	r26, 0x39	; 57
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	0b b6       	in	r0, 0x3b	; 59
     5f2:	ab bf       	out	0x3b, r26	; 59
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
     5f8:	0b be       	out	0x3b, r0	; 59
	pollBusy();
     5fa:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
     5fe:	08 95       	ret

00000600 <outChar>:
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
	}
}

void outChar(char c) {
     600:	cf 93       	push	r28
     602:	c8 2f       	mov	r28, r24
	pollBusy();	//wait til BF not set
     604:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	__far_mem_write(LCD_Data, c);	//write to data the character passed in
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	50 e5       	ldi	r21, 0x50	; 80
     60c:	69 e3       	ldi	r22, 0x39	; 57
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	6b bf       	out	0x3b, r22	; 59
     614:	fa 01       	movw	r30, r20
     616:	c0 83       	st	Z, r28
     618:	0b be       	out	0x3b, r0	; 59
}
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <outString>:

void outString(char *str) {
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
	//counter for index
	int index = 0;
	//until we've reached the end of our string
	while(str[index] != '\0') {
     624:	88 81       	ld	r24, Y
     626:	88 23       	and	r24, r24
     628:	41 f0       	breq	.+16     	; 0x63a <outString+0x1c>
     62a:	21 96       	adiw	r28, 0x01	; 1
		//output currently indexed character
		outChar(str[index]);
     62c:	0e 94 00 03 	call	0x600	; 0x600 <outChar>
		//wait til busy flag isn't set
		pollBusy();
     630:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>

void outString(char *str) {
	//counter for index
	int index = 0;
	//until we've reached the end of our string
	while(str[index] != '\0') {
     634:	89 91       	ld	r24, Y+
     636:	81 11       	cpse	r24, r1
     638:	f9 cf       	rjmp	.-14     	; 0x62c <outString+0xe>
		//wait til busy flag isn't set
		pollBusy();
		//increment index
		index++;
	}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <printNote>:
	pollBusy();
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
	pollBusy();
}

void printNote(char *note, char *freq) {
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	8c 01       	movw	r16, r24
     64a:	eb 01       	movw	r28, r22
	__far_mem_write(LCD_Command, 0x01); //clear LCD
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e5       	ldi	r25, 0x50	; 80
     652:	a9 e3       	ldi	r26, 0x39	; 57
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	0b b6       	in	r0, 0x3b	; 59
     658:	ab bf       	out	0x3b, r26	; 59
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
     65e:	0b be       	out	0x3b, r0	; 59
	pollBusy(); 
     660:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	outString(note);
     664:	c8 01       	movw	r24, r16
     666:	0e 94 0f 03 	call	0x61e	; 0x61e <outString>
	pollBusy();
     66a:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	__far_mem_write(LCD_Command, 0xC0); //next line
     66e:	20 ec       	ldi	r18, 0xC0	; 192
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e5       	ldi	r25, 0x50	; 80
     674:	a9 e3       	ldi	r26, 0x39	; 57
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	0b b6       	in	r0, 0x3b	; 59
     67a:	ab bf       	out	0x3b, r26	; 59
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	0b be       	out	0x3b, r0	; 59
	pollBusy();
     682:	0e 94 b4 02 	call	0x568	; 0x568 <pollBusy>
	outString(freq);
     686:	ce 01       	movw	r24, r28
     688:	0e 94 0f 03 	call	0x61e	; 0x61e <outString>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <playNote>:
		
    }
}

void playNote(char *note, char *freq) {
	printNote(note, freq);
     696:	0e 94 20 03 	call	0x640	; 0x640 <printNote>
	TCE1.PER = dur_567;
     69a:	e0 e4       	ldi	r30, 0x40	; 64
     69c:	fa e0       	ldi	r31, 0x0A	; 10
     69e:	80 e5       	ldi	r24, 0x50	; 80
     6a0:	95 e4       	ldi	r25, 0x45	; 69
     6a2:	86 a3       	std	Z+38, r24	; 0x26
     6a4:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLFSET = 0x08;	//restart the TC 
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	81 87       	std	Z+9, r24	; 0x09
	TCE0_init();
     6aa:	0e 94 26 01 	call	0x24c	; 0x24c <TCE0_init>
     6ae:	08 95       	ret

000006b0 <playANote>:
		//increment index
		index++;
	}
}

void playANote(int freq){
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	bc 01       	movw	r22, r24
	TCE0.CTRLA = 0x01;
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	da e0       	ldi	r29, 0x0A	; 10
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	88 83       	st	Y, r24
	TCE0_init();
}

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
     6be:	07 2e       	mov	r0, r23
     6c0:	00 0c       	add	r0, r0
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__floatsisf>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	8a e7       	ldi	r24, 0x7A	; 122
     6d4:	94 e4       	ldi	r25, 0x44	; 68
     6d6:	0e 94 cf 0a 	call	0x159e	; 0x159e <__divsf3>
	double period = (double)frac * 1000;
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	4a e7       	ldi	r20, 0x7A	; 122
     6e0:	54 e4       	ldi	r21, 0x44	; 68
     6e2:	0e 94 05 0c 	call	0x180a	; 0x180a <__mulsf3>
	TCE0.CCA = (int)period; 
     6e6:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fixsfsi>
     6ea:	68 a7       	std	Y+40, r22	; 0x28
     6ec:	79 a7       	std	Y+41, r23	; 0x29
}

void playANote(int freq){
	TCE0.CTRLA = 0x01;
	freqToNote(freq);
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <doTheThing>:
	
	i = 0; 
	return 0; 
}

int doTheThing(int period, int freq) {
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	eb 01       	movw	r28, r22
	int f = 0; 
	TCE1.PER = period;
     6fa:	e0 e4       	ldi	r30, 0x40	; 64
     6fc:	fa e0       	ldi	r31, 0x0A	; 10
     6fe:	86 a3       	std	Z+38, r24	; 0x26
     700:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLFSET = 0x08;	//restart the TC
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	81 87       	std	Z+9, r24	; 0x09
	TCE0_init(); 
     706:	0e 94 26 01 	call	0x24c	; 0x24c <TCE0_init>
	playANote(freq);		//play the note
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <playANote>
	while(i == 1) {
     710:	09 c0       	rjmp	.+18     	; 0x724 <doTheThing+0x30>
		f = keypad_scan();
     712:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
		if(f != 14){
     716:	0e 97       	sbiw	r24, 0x0e	; 14
     718:	29 f0       	breq	.+10     	; 0x724 <doTheThing+0x30>
			//if keypress changes return from function
			TCE0_quit();
     71a:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
			return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0c c0       	rjmp	.+24     	; 0x73c <doTheThing+0x48>
	int f = 0; 
	TCE1.PER = period;
	TCE1.CTRLFSET = 0x08;	//restart the TC
	TCE0_init(); 
	playANote(freq);		//play the note
	while(i == 1) {
     724:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <__data_end>
     728:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <__data_end+0x1>
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	89 f3       	breq	.-30     	; 0x712 <doTheThing+0x1e>
			//if keypress changes return from function
			TCE0_quit();
			return 0;
		}
	}
	i = 1; 
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     738:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	return 1; 
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <doTheThing2>:

int doTheThing2(int period, int freq) {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	eb 01       	movw	r28, r22
	int f = 0; 
	TCE1.PER = period;
     748:	e0 e4       	ldi	r30, 0x40	; 64
     74a:	fa e0       	ldi	r31, 0x0A	; 10
     74c:	86 a3       	std	Z+38, r24	; 0x26
     74e:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLFSET = 0x08;	//restart the TC
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	81 87       	std	Z+9, r24	; 0x09
	TCE0_init(); 
     754:	0e 94 26 01 	call	0x24c	; 0x24c <TCE0_init>
	playANote(freq);		//play the note
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <playANote>
	while(i == 1) {
     75e:	09 c0       	rjmp	.+18     	; 0x772 <doTheThing2+0x30>
		f = keypad_scan();
     760:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
		if(f != 15){
     764:	0f 97       	sbiw	r24, 0x0f	; 15
     766:	29 f0       	breq	.+10     	; 0x772 <doTheThing2+0x30>
			//if keypress changes return from function
			TCE0_quit();
     768:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
			return 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0c c0       	rjmp	.+24     	; 0x78a <doTheThing2+0x48>
	int f = 0; 
	TCE1.PER = period;
	TCE1.CTRLFSET = 0x08;	//restart the TC
	TCE0_init(); 
	playANote(freq);		//play the note
	while(i == 1) {
     772:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <__data_end>
     776:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <__data_end+0x1>
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	89 f3       	breq	.-30     	; 0x760 <doTheThing2+0x1e>
			//if keypress changes return from function
			TCE0_quit();
			return 0;
		}
	}
	i = 1; 
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     786:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	return 1; 
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <doPause>:

int doPause(int period) {
	int f = 0; 
	TCE1.PER = period;
     790:	e0 e4       	ldi	r30, 0x40	; 64
     792:	fa e0       	ldi	r31, 0x0A	; 10
     794:	86 a3       	std	Z+38, r24	; 0x26
     796:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLFSET = 0x08;	//restart the TC
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	81 87       	std	Z+9, r24	; 0x09
	TCE0_quit();		//break 
     79c:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
	while(i == 1) {
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <doPause+0x1a>
		f = keypad_scan();
     7a2:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
		if(f != 14){
     7a6:	0e 97       	sbiw	r24, 0x0e	; 14
     7a8:	69 f4       	brne	.+26     	; 0x7c4 <doPause+0x34>
int doPause(int period) {
	int f = 0; 
	TCE1.PER = period;
	TCE1.CTRLFSET = 0x08;	//restart the TC
	TCE0_quit();		//break 
	while(i == 1) {
     7aa:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <__data_end>
     7ae:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <__data_end+0x1>
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	b1 f3       	breq	.-20     	; 0x7a2 <doPause+0x12>
		if(f != 14){
			//if keypress changes return from function
			return 0;
		}
	}
	i = 1; 
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     7be:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	return 1; 
     7c2:	08 95       	ret
	TCE0_quit();		//break 
	while(i == 1) {
		f = keypad_scan();
		if(f != 14){
			//if keypress changes return from function
			return 0;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	i = 1; 
	return 1; 
}
     7c8:	08 95       	ret

000007ca <playSoundsOfSilence>:
void playANote(int freq){
	TCE0.CTRLA = 0x01;
	freqToNote(freq);
}

int playSoundsOfSilence() {
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	62 97       	sbiw	r28, 0x12	; 18
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
	char song1[] = "Sounds Of";
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	e8 e2       	ldi	r30, 0x28	; 40
     7dc:	f0 e2       	ldi	r31, 0x20	; 32
     7de:	de 01       	movw	r26, r28
     7e0:	11 96       	adiw	r26, 0x01	; 1
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <playSoundsOfSilence+0x18>
	char song2[] = "Silence";
     7ea:	88 e0       	ldi	r24, 0x08	; 8
     7ec:	e2 e3       	ldi	r30, 0x32	; 50
     7ee:	f0 e2       	ldi	r31, 0x20	; 32
     7f0:	de 01       	movw	r26, r28
     7f2:	1b 96       	adiw	r26, 0x0b	; 11
     7f4:	01 90       	ld	r0, Z+
     7f6:	0d 92       	st	X+, r0
     7f8:	8a 95       	dec	r24
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <playSoundsOfSilence+0x2a>
	printNote(song1, song2);
     7fc:	be 01       	movw	r22, r28
     7fe:	65 5f       	subi	r22, 0xF5	; 245
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	0e 94 20 03 	call	0x640	; 0x640 <printNote>
	
	i = 1;	//condition for ISR
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     812:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	
	//first line
	if(doTheThing(quarter, B6) == 0) return 0;	//pause b/w notes
     816:	68 eb       	ldi	r22, 0xB8	; 184
     818:	77 e0       	ldi	r23, 0x07	; 7
     81a:	84 e5       	ldi	r24, 0x54	; 84
     81c:	91 e1       	ldi	r25, 0x11	; 17
     81e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	09 f4       	brne	.+2      	; 0x828 <playSoundsOfSilence+0x5e>
     826:	52 c3       	rjmp	.+1700   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;		//pause b/w notes
     828:	84 e5       	ldi	r24, 0x54	; 84
     82a:	91 e1       	ldi	r25, 0x11	; 17
     82c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	09 f4       	brne	.+2      	; 0x836 <playSoundsOfSilence+0x6c>
     834:	4b c3       	rjmp	.+1686   	; 0xecc <playSoundsOfSilence+0x702>

	if(doTheThing(quarter, B6) == 0) return 0;	//pause b/w notes
     836:	68 eb       	ldi	r22, 0xB8	; 184
     838:	77 e0       	ldi	r23, 0x07	; 7
     83a:	84 e5       	ldi	r24, 0x54	; 84
     83c:	91 e1       	ldi	r25, 0x11	; 17
     83e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	09 f4       	brne	.+2      	; 0x848 <playSoundsOfSilence+0x7e>
     846:	42 c3       	rjmp	.+1668   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     848:	84 e5       	ldi	r24, 0x54	; 84
     84a:	91 e1       	ldi	r25, 0x11	; 17
     84c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	09 f4       	brne	.+2      	; 0x856 <playSoundsOfSilence+0x8c>
     854:	3b c3       	rjmp	.+1654   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     856:	67 e9       	ldi	r22, 0x97	; 151
     858:	74 e0       	ldi	r23, 0x04	; 4
     85a:	84 e5       	ldi	r24, 0x54	; 84
     85c:	91 e1       	ldi	r25, 0x11	; 17
     85e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	09 f4       	brne	.+2      	; 0x868 <playSoundsOfSilence+0x9e>
     866:	32 c3       	rjmp	.+1636   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     868:	84 e5       	ldi	r24, 0x54	; 84
     86a:	91 e1       	ldi	r25, 0x11	; 17
     86c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	09 f4       	brne	.+2      	; 0x876 <playSoundsOfSilence+0xac>
     874:	2b c3       	rjmp	.+1622   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     876:	67 e9       	ldi	r22, 0x97	; 151
     878:	74 e0       	ldi	r23, 0x04	; 4
     87a:	84 e5       	ldi	r24, 0x54	; 84
     87c:	91 e1       	ldi	r25, 0x11	; 17
     87e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	09 f4       	brne	.+2      	; 0x888 <playSoundsOfSilence+0xbe>
     886:	22 c3       	rjmp	.+1604   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     888:	84 e5       	ldi	r24, 0x54	; 84
     88a:	91 e1       	ldi	r25, 0x11	; 17
     88c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	09 f4       	brne	.+2      	; 0x896 <playSoundsOfSilence+0xcc>
     894:	1b c3       	rjmp	.+1590   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     896:	68 ec       	ldi	r22, 0xC8	; 200
     898:	75 e0       	ldi	r23, 0x05	; 5
     89a:	84 e5       	ldi	r24, 0x54	; 84
     89c:	91 e1       	ldi	r25, 0x11	; 17
     89e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <playSoundsOfSilence+0xde>
     8a6:	12 c3       	rjmp	.+1572   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     8a8:	84 e5       	ldi	r24, 0x54	; 84
     8aa:	91 e1       	ldi	r25, 0x11	; 17
     8ac:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <playSoundsOfSilence+0xec>
     8b4:	0b c3       	rjmp	.+1558   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     8b6:	68 ec       	ldi	r22, 0xC8	; 200
     8b8:	75 e0       	ldi	r23, 0x05	; 5
     8ba:	84 e5       	ldi	r24, 0x54	; 84
     8bc:	91 e1       	ldi	r25, 0x11	; 17
     8be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     8c2:	00 97       	sbiw	r24, 0x00	; 0
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <playSoundsOfSilence+0xfe>
     8c6:	02 c3       	rjmp	.+1540   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     8c8:	84 e5       	ldi	r24, 0x54	; 84
     8ca:	91 e1       	ldi	r25, 0x11	; 17
     8cc:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <playSoundsOfSilence+0x10c>
     8d4:	fb c2       	rjmp	.+1526   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, E6) == 0) return 0;	//pause b/w notes
     8d6:	67 e2       	ldi	r22, 0x27	; 39
     8d8:	75 e0       	ldi	r23, 0x05	; 5
     8da:	88 ea       	ldi	r24, 0xA8	; 168
     8dc:	91 e6       	ldi	r25, 0x61	; 97
     8de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <playSoundsOfSilence+0x11e>
     8e6:	f2 c2       	rjmp	.+1508   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     8e8:	80 e5       	ldi	r24, 0x50	; 80
     8ea:	95 e4       	ldi	r25, 0x45	; 69
     8ec:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <playSoundsOfSilence+0x12c>
     8f4:	eb c2       	rjmp	.+1494   	; 0xecc <playSoundsOfSilence+0x702>
	
	//second line
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     8f6:	60 ee       	ldi	r22, 0xE0	; 224
     8f8:	76 e0       	ldi	r23, 0x06	; 6
     8fa:	84 e5       	ldi	r24, 0x54	; 84
     8fc:	91 e1       	ldi	r25, 0x11	; 17
     8fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	09 f4       	brne	.+2      	; 0x908 <playSoundsOfSilence+0x13e>
     906:	e2 c2       	rjmp	.+1476   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;		//pause b/w notes
     908:	84 e5       	ldi	r24, 0x54	; 84
     90a:	91 e1       	ldi	r25, 0x11	; 17
     90c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	09 f4       	brne	.+2      	; 0x916 <playSoundsOfSilence+0x14c>
     914:	db c2       	rjmp	.+1462   	; 0xecc <playSoundsOfSilence+0x702>

	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     916:	60 ee       	ldi	r22, 0xE0	; 224
     918:	76 e0       	ldi	r23, 0x06	; 6
     91a:	84 e5       	ldi	r24, 0x54	; 84
     91c:	91 e1       	ldi	r25, 0x11	; 17
     91e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	09 f4       	brne	.+2      	; 0x928 <playSoundsOfSilence+0x15e>
     926:	d2 c2       	rjmp	.+1444   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     928:	84 e5       	ldi	r24, 0x54	; 84
     92a:	91 e1       	ldi	r25, 0x11	; 17
     92c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	09 f4       	brne	.+2      	; 0x936 <playSoundsOfSilence+0x16c>
     934:	cb c2       	rjmp	.+1430   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, C6_SHARP) == 0) return 0;	//pause b/w notes
     936:	65 e5       	ldi	r22, 0x55	; 85
     938:	74 e0       	ldi	r23, 0x04	; 4
     93a:	84 e5       	ldi	r24, 0x54	; 84
     93c:	91 e1       	ldi	r25, 0x11	; 17
     93e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	09 f4       	brne	.+2      	; 0x948 <playSoundsOfSilence+0x17e>
     946:	c2 c2       	rjmp	.+1412   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     948:	84 e5       	ldi	r24, 0x54	; 84
     94a:	91 e1       	ldi	r25, 0x11	; 17
     94c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	09 f4       	brne	.+2      	; 0x956 <playSoundsOfSilence+0x18c>
     954:	bb c2       	rjmp	.+1398   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, C6_SHARP) == 0) return 0;	//pause b/w notes
     956:	65 e5       	ldi	r22, 0x55	; 85
     958:	74 e0       	ldi	r23, 0x04	; 4
     95a:	84 e5       	ldi	r24, 0x54	; 84
     95c:	91 e1       	ldi	r25, 0x11	; 17
     95e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f4       	brne	.+2      	; 0x968 <playSoundsOfSilence+0x19e>
     966:	b2 c2       	rjmp	.+1380   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     968:	84 e5       	ldi	r24, 0x54	; 84
     96a:	91 e1       	ldi	r25, 0x11	; 17
     96c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	09 f4       	brne	.+2      	; 0x976 <playSoundsOfSilence+0x1ac>
     974:	ab c2       	rjmp	.+1366   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, E6) == 0) return 0;	//pause b/w notes
     976:	67 e2       	ldi	r22, 0x27	; 39
     978:	75 e0       	ldi	r23, 0x05	; 5
     97a:	84 e5       	ldi	r24, 0x54	; 84
     97c:	91 e1       	ldi	r25, 0x11	; 17
     97e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	09 f4       	brne	.+2      	; 0x988 <playSoundsOfSilence+0x1be>
     986:	a2 c2       	rjmp	.+1348   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     988:	84 e5       	ldi	r24, 0x54	; 84
     98a:	91 e1       	ldi	r25, 0x11	; 17
     98c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	09 f4       	brne	.+2      	; 0x996 <playSoundsOfSilence+0x1cc>
     994:	9b c2       	rjmp	.+1334   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, E6) == 0) return 0;	//pause b/w notes
     996:	67 e2       	ldi	r22, 0x27	; 39
     998:	75 e0       	ldi	r23, 0x05	; 5
     99a:	84 e5       	ldi	r24, 0x54	; 84
     99c:	91 e1       	ldi	r25, 0x11	; 17
     99e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <playSoundsOfSilence+0x1de>
     9a6:	92 c2       	rjmp	.+1316   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     9a8:	84 e5       	ldi	r24, 0x54	; 84
     9aa:	91 e1       	ldi	r25, 0x11	; 17
     9ac:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <playSoundsOfSilence+0x1ec>
     9b4:	8b c2       	rjmp	.+1302   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, D6) == 0) return 0;	//pause b/w notes
     9b6:	67 e9       	ldi	r22, 0x97	; 151
     9b8:	74 e0       	ldi	r23, 0x04	; 4
     9ba:	88 ea       	ldi	r24, 0xA8	; 168
     9bc:	91 e6       	ldi	r25, 0x61	; 97
     9be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <playSoundsOfSilence+0x1fe>
     9c6:	82 c2       	rjmp	.+1284   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     9c8:	80 e5       	ldi	r24, 0x50	; 80
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <playSoundsOfSilence+0x20c>
     9d4:	7b c2       	rjmp	.+1270   	; 0xecc <playSoundsOfSilence+0x702>
	
	//third line
	if(doTheThing(quarter, C6_SHARP) == 0) return 0;	//pause b/w notes
     9d6:	65 e5       	ldi	r22, 0x55	; 85
     9d8:	74 e0       	ldi	r23, 0x04	; 4
     9da:	84 e5       	ldi	r24, 0x54	; 84
     9dc:	91 e1       	ldi	r25, 0x11	; 17
     9de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <playSoundsOfSilence+0x21e>
     9e6:	72 c2       	rjmp	.+1252   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;		//pause b/w notes
     9e8:	84 e5       	ldi	r24, 0x54	; 84
     9ea:	91 e1       	ldi	r25, 0x11	; 17
     9ec:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <playSoundsOfSilence+0x22c>
     9f4:	6b c2       	rjmp	.+1238   	; 0xecc <playSoundsOfSilence+0x702>

	if(doTheThing(quarter, C6_SHARP) == 0) return 0;	//pause b/w notes
     9f6:	65 e5       	ldi	r22, 0x55	; 85
     9f8:	74 e0       	ldi	r23, 0x04	; 4
     9fa:	84 e5       	ldi	r24, 0x54	; 84
     9fc:	91 e1       	ldi	r25, 0x11	; 17
     9fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	09 f4       	brne	.+2      	; 0xa08 <playSoundsOfSilence+0x23e>
     a06:	62 c2       	rjmp	.+1220   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     a08:	84 e5       	ldi	r24, 0x54	; 84
     a0a:	91 e1       	ldi	r25, 0x11	; 17
     a0c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	09 f4       	brne	.+2      	; 0xa16 <playSoundsOfSilence+0x24c>
     a14:	5b c2       	rjmp	.+1206   	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     a16:	68 ec       	ldi	r22, 0xC8	; 200
     a18:	75 e0       	ldi	r23, 0x05	; 5
     a1a:	84 e5       	ldi	r24, 0x54	; 84
     a1c:	91 e1       	ldi	r25, 0x11	; 17
     a1e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	09 f4       	brne	.+2      	; 0xa28 <playSoundsOfSilence+0x25e>
     a26:	52 c2       	rjmp	.+1188   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     a28:	84 e5       	ldi	r24, 0x54	; 84
     a2a:	91 e1       	ldi	r25, 0x11	; 17
     a2c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	09 f4       	brne	.+2      	; 0xa36 <playSoundsOfSilence+0x26c>
     a34:	4b c2       	rjmp	.+1174   	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     a36:	68 ec       	ldi	r22, 0xC8	; 200
     a38:	75 e0       	ldi	r23, 0x05	; 5
     a3a:	84 e5       	ldi	r24, 0x54	; 84
     a3c:	91 e1       	ldi	r25, 0x11	; 17
     a3e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	09 f4       	brne	.+2      	; 0xa48 <playSoundsOfSilence+0x27e>
     a46:	42 c2       	rjmp	.+1156   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     a48:	84 e5       	ldi	r24, 0x54	; 84
     a4a:	91 e1       	ldi	r25, 0x11	; 17
     a4c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	09 f4       	brne	.+2      	; 0xa56 <playSoundsOfSilence+0x28c>
     a54:	3b c2       	rjmp	.+1142   	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     a56:	60 ee       	ldi	r22, 0xE0	; 224
     a58:	76 e0       	ldi	r23, 0x06	; 6
     a5a:	84 e5       	ldi	r24, 0x54	; 84
     a5c:	91 e1       	ldi	r25, 0x11	; 17
     a5e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	09 f4       	brne	.+2      	; 0xa68 <playSoundsOfSilence+0x29e>
     a66:	32 c2       	rjmp	.+1124   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     a68:	84 e5       	ldi	r24, 0x54	; 84
     a6a:	91 e1       	ldi	r25, 0x11	; 17
     a6c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	09 f4       	brne	.+2      	; 0xa76 <playSoundsOfSilence+0x2ac>
     a74:	2b c2       	rjmp	.+1110   	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     a76:	60 ee       	ldi	r22, 0xE0	; 224
     a78:	76 e0       	ldi	r23, 0x06	; 6
     a7a:	84 e5       	ldi	r24, 0x54	; 84
     a7c:	91 e1       	ldi	r25, 0x11	; 17
     a7e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	09 f4       	brne	.+2      	; 0xa88 <playSoundsOfSilence+0x2be>
     a86:	22 c2       	rjmp	.+1092   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     a88:	84 e5       	ldi	r24, 0x54	; 84
     a8a:	91 e1       	ldi	r25, 0x11	; 17
     a8c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	09 f4       	brne	.+2      	; 0xa96 <playSoundsOfSilence+0x2cc>
     a94:	1b c2       	rjmp	.+1078   	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(dothalf, B6) == 0) return 0;	//pause b/w notes
     a96:	68 eb       	ldi	r22, 0xB8	; 184
     a98:	77 e0       	ldi	r23, 0x07	; 7
     a9a:	84 ed       	ldi	r24, 0xD4	; 212
     a9c:	90 e3       	ldi	r25, 0x30	; 48
     a9e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <playSoundsOfSilence+0x2de>
     aa6:	12 c2       	rjmp	.+1060   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     aa8:	84 e5       	ldi	r24, 0x54	; 84
     aaa:	91 e1       	ldi	r25, 0x11	; 17
     aac:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	09 f4       	brne	.+2      	; 0xab6 <playSoundsOfSilence+0x2ec>
     ab4:	0b c2       	rjmp	.+1046   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dothalf, B6) == 0) return 0;	//pause b/w notes
     ab6:	68 eb       	ldi	r22, 0xB8	; 184
     ab8:	77 e0       	ldi	r23, 0x07	; 7
     aba:	84 ed       	ldi	r24, 0xD4	; 212
     abc:	90 e3       	ldi	r25, 0x30	; 48
     abe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	09 f4       	brne	.+2      	; 0xac8 <playSoundsOfSilence+0x2fe>
     ac6:	02 c2       	rjmp	.+1028   	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     ac8:	84 e5       	ldi	r24, 0x54	; 84
     aca:	91 e1       	ldi	r25, 0x11	; 17
     acc:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	09 f4       	brne	.+2      	; 0xad6 <playSoundsOfSilence+0x30c>
     ad4:	fb c1       	rjmp	.+1014   	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, A6) == 0) return 0;	//pause b/w notes
     ad6:	60 ee       	ldi	r22, 0xE0	; 224
     ad8:	76 e0       	ldi	r23, 0x06	; 6
     ada:	88 ea       	ldi	r24, 0xA8	; 168
     adc:	91 e6       	ldi	r25, 0x61	; 97
     ade:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	09 f4       	brne	.+2      	; 0xae8 <playSoundsOfSilence+0x31e>
     ae6:	f2 c1       	rjmp	.+996    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     ae8:	80 e5       	ldi	r24, 0x50	; 80
     aea:	95 e4       	ldi	r25, 0x45	; 69
     aec:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	09 f4       	brne	.+2      	; 0xaf6 <playSoundsOfSilence+0x32c>
     af4:	eb c1       	rjmp	.+982    	; 0xecc <playSoundsOfSilence+0x702>
	
	//fourth line
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     af6:	67 e9       	ldi	r22, 0x97	; 151
     af8:	74 e0       	ldi	r23, 0x04	; 4
     afa:	84 e5       	ldi	r24, 0x54	; 84
     afc:	91 e1       	ldi	r25, 0x11	; 17
     afe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	09 f4       	brne	.+2      	; 0xb08 <playSoundsOfSilence+0x33e>
     b06:	e2 c1       	rjmp	.+964    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;		//pause b/w notes
     b08:	84 e5       	ldi	r24, 0x54	; 84
     b0a:	91 e1       	ldi	r25, 0x11	; 17
     b0c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	09 f4       	brne	.+2      	; 0xb16 <playSoundsOfSilence+0x34c>
     b14:	db c1       	rjmp	.+950    	; 0xecc <playSoundsOfSilence+0x702>

	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     b16:	67 e9       	ldi	r22, 0x97	; 151
     b18:	74 e0       	ldi	r23, 0x04	; 4
     b1a:	84 e5       	ldi	r24, 0x54	; 84
     b1c:	91 e1       	ldi	r25, 0x11	; 17
     b1e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	09 f4       	brne	.+2      	; 0xb28 <playSoundsOfSilence+0x35e>
     b26:	d2 c1       	rjmp	.+932    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     b28:	84 e5       	ldi	r24, 0x54	; 84
     b2a:	91 e1       	ldi	r25, 0x11	; 17
     b2c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	09 f4       	brne	.+2      	; 0xb36 <playSoundsOfSilence+0x36c>
     b34:	cb c1       	rjmp	.+918    	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     b36:	68 ec       	ldi	r22, 0xC8	; 200
     b38:	75 e0       	ldi	r23, 0x05	; 5
     b3a:	84 e5       	ldi	r24, 0x54	; 84
     b3c:	91 e1       	ldi	r25, 0x11	; 17
     b3e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	09 f4       	brne	.+2      	; 0xb48 <playSoundsOfSilence+0x37e>
     b46:	c2 c1       	rjmp	.+900    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     b48:	84 e5       	ldi	r24, 0x54	; 84
     b4a:	91 e1       	ldi	r25, 0x11	; 17
     b4c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	09 f4       	brne	.+2      	; 0xb56 <playSoundsOfSilence+0x38c>
     b54:	bb c1       	rjmp	.+886    	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, F6_SHARP) == 0) return 0;	//pause b/w notes
     b56:	68 ec       	ldi	r22, 0xC8	; 200
     b58:	75 e0       	ldi	r23, 0x05	; 5
     b5a:	84 e5       	ldi	r24, 0x54	; 84
     b5c:	91 e1       	ldi	r25, 0x11	; 17
     b5e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	09 f4       	brne	.+2      	; 0xb68 <playSoundsOfSilence+0x39e>
     b66:	b2 c1       	rjmp	.+868    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     b68:	84 e5       	ldi	r24, 0x54	; 84
     b6a:	91 e1       	ldi	r25, 0x11	; 17
     b6c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	09 f4       	brne	.+2      	; 0xb76 <playSoundsOfSilence+0x3ac>
     b74:	ab c1       	rjmp	.+854    	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     b76:	60 ee       	ldi	r22, 0xE0	; 224
     b78:	76 e0       	ldi	r23, 0x06	; 6
     b7a:	84 e5       	ldi	r24, 0x54	; 84
     b7c:	91 e1       	ldi	r25, 0x11	; 17
     b7e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	09 f4       	brne	.+2      	; 0xb88 <playSoundsOfSilence+0x3be>
     b86:	a2 c1       	rjmp	.+836    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     b88:	84 e5       	ldi	r24, 0x54	; 84
     b8a:	91 e1       	ldi	r25, 0x11	; 17
     b8c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	09 f4       	brne	.+2      	; 0xb96 <playSoundsOfSilence+0x3cc>
     b94:	9b c1       	rjmp	.+822    	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     b96:	60 ee       	ldi	r22, 0xE0	; 224
     b98:	76 e0       	ldi	r23, 0x06	; 6
     b9a:	84 e5       	ldi	r24, 0x54	; 84
     b9c:	91 e1       	ldi	r25, 0x11	; 17
     b9e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	09 f4       	brne	.+2      	; 0xba8 <playSoundsOfSilence+0x3de>
     ba6:	92 c1       	rjmp	.+804    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     ba8:	84 e5       	ldi	r24, 0x54	; 84
     baa:	91 e1       	ldi	r25, 0x11	; 17
     bac:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <playSoundsOfSilence+0x3ec>
     bb4:	8b c1       	rjmp	.+790    	; 0xecc <playSoundsOfSilence+0x702>
		
	if(doTheThing(dothalf, B6) == 0) return 0;	//pause b/w notes
     bb6:	68 eb       	ldi	r22, 0xB8	; 184
     bb8:	77 e0       	ldi	r23, 0x07	; 7
     bba:	84 ed       	ldi	r24, 0xD4	; 212
     bbc:	90 e3       	ldi	r25, 0x30	; 48
     bbe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <playSoundsOfSilence+0x3fe>
     bc6:	82 c1       	rjmp	.+772    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     bc8:	84 e5       	ldi	r24, 0x54	; 84
     bca:	91 e1       	ldi	r25, 0x11	; 17
     bcc:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <playSoundsOfSilence+0x40c>
     bd4:	7b c1       	rjmp	.+758    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dothalf, B6) == 0) return 0;	//pause b/w notes
     bd6:	68 eb       	ldi	r22, 0xB8	; 184
     bd8:	77 e0       	ldi	r23, 0x07	; 7
     bda:	84 ed       	ldi	r24, 0xD4	; 212
     bdc:	90 e3       	ldi	r25, 0x30	; 48
     bde:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	09 f4       	brne	.+2      	; 0xbe8 <playSoundsOfSilence+0x41e>
     be6:	72 c1       	rjmp	.+740    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     be8:	84 e5       	ldi	r24, 0x54	; 84
     bea:	91 e1       	ldi	r25, 0x11	; 17
     bec:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <playSoundsOfSilence+0x42c>
     bf4:	6b c1       	rjmp	.+726    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, A6) == 0) return 0;	//pause b/w notes
     bf6:	60 ee       	ldi	r22, 0xE0	; 224
     bf8:	76 e0       	ldi	r23, 0x06	; 6
     bfa:	88 ea       	ldi	r24, 0xA8	; 168
     bfc:	91 e6       	ldi	r25, 0x61	; 97
     bfe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f4       	brne	.+2      	; 0xc08 <playSoundsOfSilence+0x43e>
     c06:	62 c1       	rjmp	.+708    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     c08:	80 e5       	ldi	r24, 0x50	; 80
     c0a:	95 e4       	ldi	r25, 0x45	; 69
     c0c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f4       	brne	.+2      	; 0xc16 <playSoundsOfSilence+0x44c>
     c14:	5b c1       	rjmp	.+694    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     c16:	80 e5       	ldi	r24, 0x50	; 80
     c18:	95 e4       	ldi	r25, 0x45	; 69
     c1a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	09 f4       	brne	.+2      	; 0xc24 <playSoundsOfSilence+0x45a>
     c22:	54 c1       	rjmp	.+680    	; 0xecc <playSoundsOfSilence+0x702>
	
	//fifth line
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     c24:	67 e9       	ldi	r22, 0x97	; 151
     c26:	74 e0       	ldi	r23, 0x04	; 4
     c28:	84 e5       	ldi	r24, 0x54	; 84
     c2a:	91 e1       	ldi	r25, 0x11	; 17
     c2c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	09 f4       	brne	.+2      	; 0xc36 <playSoundsOfSilence+0x46c>
     c34:	4b c1       	rjmp	.+662    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     c36:	84 e5       	ldi	r24, 0x54	; 84
     c38:	91 e1       	ldi	r25, 0x11	; 17
     c3a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	09 f4       	brne	.+2      	; 0xc44 <playSoundsOfSilence+0x47a>
     c42:	44 c1       	rjmp	.+648    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     c44:	67 e9       	ldi	r22, 0x97	; 151
     c46:	74 e0       	ldi	r23, 0x04	; 4
     c48:	84 e5       	ldi	r24, 0x54	; 84
     c4a:	91 e1       	ldi	r25, 0x11	; 17
     c4c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	09 f4       	brne	.+2      	; 0xc56 <playSoundsOfSilence+0x48c>
     c54:	3b c1       	rjmp	.+630    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     c56:	84 e5       	ldi	r24, 0x54	; 84
     c58:	91 e1       	ldi	r25, 0x11	; 17
     c5a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	09 f4       	brne	.+2      	; 0xc64 <playSoundsOfSilence+0x49a>
     c62:	34 c1       	rjmp	.+616    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, B6) == 0) return 0;	//pause b/w notes
     c64:	68 eb       	ldi	r22, 0xB8	; 184
     c66:	77 e0       	ldi	r23, 0x07	; 7
     c68:	88 ea       	ldi	r24, 0xA8	; 168
     c6a:	92 e2       	ldi	r25, 0x22	; 34
     c6c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	09 f4       	brne	.+2      	; 0xc76 <playSoundsOfSilence+0x4ac>
     c74:	2b c1       	rjmp	.+598    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     c76:	84 e5       	ldi	r24, 0x54	; 84
     c78:	91 e1       	ldi	r25, 0x11	; 17
     c7a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	09 f4       	brne	.+2      	; 0xc84 <playSoundsOfSilence+0x4ba>
     c82:	24 c1       	rjmp	.+584    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(full, B6) == 0) return 0;	//pause b/w notes
     c84:	68 eb       	ldi	r22, 0xB8	; 184
     c86:	77 e0       	ldi	r23, 0x07	; 7
     c88:	80 e5       	ldi	r24, 0x50	; 80
     c8a:	95 e4       	ldi	r25, 0x45	; 69
     c8c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	09 f4       	brne	.+2      	; 0xc96 <playSoundsOfSilence+0x4cc>
     c94:	1b c1       	rjmp	.+566    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     c96:	84 e5       	ldi	r24, 0x54	; 84
     c98:	91 e1       	ldi	r25, 0x11	; 17
     c9a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	09 f4       	brne	.+2      	; 0xca4 <playSoundsOfSilence+0x4da>
     ca2:	14 c1       	rjmp	.+552    	; 0xecc <playSoundsOfSilence+0x702>

	if(doTheThing(quarter, B6) == 0) return 0;	//pause b/w notes
     ca4:	68 eb       	ldi	r22, 0xB8	; 184
     ca6:	77 e0       	ldi	r23, 0x07	; 7
     ca8:	84 e5       	ldi	r24, 0x54	; 84
     caa:	91 e1       	ldi	r25, 0x11	; 17
     cac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <playSoundsOfSilence+0x4ec>
     cb4:	0b c1       	rjmp	.+534    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     cb6:	84 e5       	ldi	r24, 0x54	; 84
     cb8:	91 e1       	ldi	r25, 0x11	; 17
     cba:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <playSoundsOfSilence+0x4fa>
     cc2:	04 c1       	rjmp	.+520    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, C7_SHARP) == 0) return 0;	//pause b/w notes
     cc4:	69 ea       	ldi	r22, 0xA9	; 169
     cc6:	78 e0       	ldi	r23, 0x08	; 8
     cc8:	84 e5       	ldi	r24, 0x54	; 84
     cca:	91 e1       	ldi	r25, 0x11	; 17
     ccc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <playSoundsOfSilence+0x50c>
     cd4:	fb c0       	rjmp	.+502    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     cd6:	84 e5       	ldi	r24, 0x54	; 84
     cd8:	91 e1       	ldi	r25, 0x11	; 17
     cda:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	09 f4       	brne	.+2      	; 0xce4 <playSoundsOfSilence+0x51a>
     ce2:	f4 c0       	rjmp	.+488    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, D7) == 0) return 0;	//pause b/w notes
     ce4:	6d e2       	ldi	r22, 0x2D	; 45
     ce6:	79 e0       	ldi	r23, 0x09	; 9
     ce8:	88 ea       	ldi	r24, 0xA8	; 168
     cea:	92 e2       	ldi	r25, 0x22	; 34
     cec:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <playSoundsOfSilence+0x52c>
     cf4:	eb c0       	rjmp	.+470    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     cf6:	84 e5       	ldi	r24, 0x54	; 84
     cf8:	91 e1       	ldi	r25, 0x11	; 17
     cfa:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	09 f4       	brne	.+2      	; 0xd04 <playSoundsOfSilence+0x53a>
     d02:	e4 c0       	rjmp	.+456    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, D7) == 0) return 0;	//pause b/w notes
     d04:	6d e2       	ldi	r22, 0x2D	; 45
     d06:	79 e0       	ldi	r23, 0x09	; 9
     d08:	88 ea       	ldi	r24, 0xA8	; 168
     d0a:	92 e2       	ldi	r25, 0x22	; 34
     d0c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	09 f4       	brne	.+2      	; 0xd16 <playSoundsOfSilence+0x54c>
     d14:	db c0       	rjmp	.+438    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     d16:	84 e5       	ldi	r24, 0x54	; 84
     d18:	91 e1       	ldi	r25, 0x11	; 17
     d1a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	09 f4       	brne	.+2      	; 0xd24 <playSoundsOfSilence+0x55a>
     d22:	d4 c0       	rjmp	.+424    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, C7_SHARP) == 0) return 0;	//pause b/w notes
     d24:	69 ea       	ldi	r22, 0xA9	; 169
     d26:	78 e0       	ldi	r23, 0x08	; 8
     d28:	88 ea       	ldi	r24, 0xA8	; 168
     d2a:	92 e2       	ldi	r25, 0x22	; 34
     d2c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	09 f4       	brne	.+2      	; 0xd36 <playSoundsOfSilence+0x56c>
     d34:	cb c0       	rjmp	.+406    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     d36:	84 e5       	ldi	r24, 0x54	; 84
     d38:	91 e1       	ldi	r25, 0x11	; 17
     d3a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	09 f4       	brne	.+2      	; 0xd44 <playSoundsOfSilence+0x57a>
     d42:	c4 c0       	rjmp	.+392    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, B6) == 0) return 0;	//pause b/w notes
     d44:	68 eb       	ldi	r22, 0xB8	; 184
     d46:	77 e0       	ldi	r23, 0x07	; 7
     d48:	88 ea       	ldi	r24, 0xA8	; 168
     d4a:	92 e2       	ldi	r25, 0x22	; 34
     d4c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	09 f4       	brne	.+2      	; 0xd56 <playSoundsOfSilence+0x58c>
     d54:	bb c0       	rjmp	.+374    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     d56:	84 e5       	ldi	r24, 0x54	; 84
     d58:	91 e1       	ldi	r25, 0x11	; 17
     d5a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	09 f4       	brne	.+2      	; 0xd64 <playSoundsOfSilence+0x59a>
     d62:	b4 c0       	rjmp	.+360    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, A6) == 0) return 0;	//pause b/w notes
     d64:	60 ee       	ldi	r22, 0xE0	; 224
     d66:	76 e0       	ldi	r23, 0x06	; 6
     d68:	88 ea       	ldi	r24, 0xA8	; 168
     d6a:	91 e6       	ldi	r25, 0x61	; 97
     d6c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	09 f4       	brne	.+2      	; 0xd76 <playSoundsOfSilence+0x5ac>
     d74:	ab c0       	rjmp	.+342    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     d76:	84 e5       	ldi	r24, 0x54	; 84
     d78:	91 e1       	ldi	r25, 0x11	; 17
     d7a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	09 f4       	brne	.+2      	; 0xd84 <playSoundsOfSilence+0x5ba>
     d82:	a4 c0       	rjmp	.+328    	; 0xecc <playSoundsOfSilence+0x702>
	
	//next
	if(doTheThing(quarter, B6) == 0) return 0;	//pause b/w notes
     d84:	68 eb       	ldi	r22, 0xB8	; 184
     d86:	77 e0       	ldi	r23, 0x07	; 7
     d88:	84 e5       	ldi	r24, 0x54	; 84
     d8a:	91 e1       	ldi	r25, 0x11	; 17
     d8c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	09 f4       	brne	.+2      	; 0xd96 <playSoundsOfSilence+0x5cc>
     d94:	9b c0       	rjmp	.+310    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     d96:	84 e5       	ldi	r24, 0x54	; 84
     d98:	91 e1       	ldi	r25, 0x11	; 17
     d9a:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	09 f4       	brne	.+2      	; 0xda4 <playSoundsOfSilence+0x5da>
     da2:	94 c0       	rjmp	.+296    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, A6) == 0) return 0;	//pause b/w notes
     da4:	60 ee       	ldi	r22, 0xE0	; 224
     da6:	76 e0       	ldi	r23, 0x06	; 6
     da8:	84 e5       	ldi	r24, 0x54	; 84
     daa:	91 e1       	ldi	r25, 0x11	; 17
     dac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	09 f4       	brne	.+2      	; 0xdb6 <playSoundsOfSilence+0x5ec>
     db4:	8b c0       	rjmp	.+278    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     db6:	84 e5       	ldi	r24, 0x54	; 84
     db8:	91 e1       	ldi	r25, 0x11	; 17
     dba:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <playSoundsOfSilence+0x5fa>
     dc2:	84 c0       	rjmp	.+264    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(doub, F6_SHARP) == 0) return 0;	//pause b/w notes
     dc4:	68 ec       	ldi	r22, 0xC8	; 200
     dc6:	75 e0       	ldi	r23, 0x05	; 5
     dc8:	80 ea       	ldi	r24, 0xA0	; 160
     dca:	9a e8       	ldi	r25, 0x8A	; 138
     dcc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <playSoundsOfSilence+0x60c>
     dd4:	7b c0       	rjmp	.+246    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     dd6:	84 e5       	ldi	r24, 0x54	; 84
     dd8:	91 e1       	ldi	r25, 0x11	; 17
     dda:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	09 f4       	brne	.+2      	; 0xde4 <playSoundsOfSilence+0x61a>
     de2:	74 c0       	rjmp	.+232    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(full) == 0) return 0;	//pause b/w notes
     de4:	80 e5       	ldi	r24, 0x50	; 80
     de6:	95 e4       	ldi	r25, 0x45	; 69
     de8:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	09 f4       	brne	.+2      	; 0xdf2 <playSoundsOfSilence+0x628>
     df0:	6d c0       	rjmp	.+218    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     df2:	67 e9       	ldi	r22, 0x97	; 151
     df4:	74 e0       	ldi	r23, 0x04	; 4
     df6:	84 e5       	ldi	r24, 0x54	; 84
     df8:	91 e1       	ldi	r25, 0x11	; 17
     dfa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	09 f4       	brne	.+2      	; 0xe04 <playSoundsOfSilence+0x63a>
     e02:	64 c0       	rjmp	.+200    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e04:	84 e5       	ldi	r24, 0x54	; 84
     e06:	91 e1       	ldi	r25, 0x11	; 17
     e08:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	09 f4       	brne	.+2      	; 0xe12 <playSoundsOfSilence+0x648>
     e10:	5d c0       	rjmp	.+186    	; 0xecc <playSoundsOfSilence+0x702>
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     e12:	67 e9       	ldi	r22, 0x97	; 151
     e14:	74 e0       	ldi	r23, 0x04	; 4
     e16:	84 e5       	ldi	r24, 0x54	; 84
     e18:	91 e1       	ldi	r25, 0x11	; 17
     e1a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	09 f4       	brne	.+2      	; 0xe24 <playSoundsOfSilence+0x65a>
     e22:	54 c0       	rjmp	.+168    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e24:	84 e5       	ldi	r24, 0x54	; 84
     e26:	91 e1       	ldi	r25, 0x11	; 17
     e28:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	09 f4       	brne	.+2      	; 0xe32 <playSoundsOfSilence+0x668>
     e30:	4d c0       	rjmp	.+154    	; 0xecc <playSoundsOfSilence+0x702>
	if(doTheThing(quarter, D6) == 0) return 0;	//pause b/w notes
     e32:	67 e9       	ldi	r22, 0x97	; 151
     e34:	74 e0       	ldi	r23, 0x04	; 4
     e36:	84 e5       	ldi	r24, 0x54	; 84
     e38:	91 e1       	ldi	r25, 0x11	; 17
     e3a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	09 f4       	brne	.+2      	; 0xe44 <playSoundsOfSilence+0x67a>
     e42:	44 c0       	rjmp	.+136    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e44:	84 e5       	ldi	r24, 0x54	; 84
     e46:	91 e1       	ldi	r25, 0x11	; 17
     e48:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	f1 f1       	breq	.+124    	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(dotfull, A6) == 0) return 0;	//pause b/w notes
     e50:	60 ee       	ldi	r22, 0xE0	; 224
     e52:	76 e0       	ldi	r23, 0x06	; 6
     e54:	88 ea       	ldi	r24, 0xA8	; 168
     e56:	91 e6       	ldi	r25, 0x61	; 97
     e58:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	b1 f1       	breq	.+108    	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e60:	84 e5       	ldi	r24, 0x54	; 84
     e62:	91 e1       	ldi	r25, 0x11	; 17
     e64:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	81 f1       	breq	.+96     	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(quarter, C6_SHARP) == 0) return 0;	//pause b/w notes
     e6c:	65 e5       	ldi	r22, 0x55	; 85
     e6e:	74 e0       	ldi	r23, 0x04	; 4
     e70:	84 e5       	ldi	r24, 0x54	; 84
     e72:	91 e1       	ldi	r25, 0x11	; 17
     e74:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	41 f1       	breq	.+80     	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e7c:	84 e5       	ldi	r24, 0x54	; 84
     e7e:	91 e1       	ldi	r25, 0x11	; 17
     e80:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	11 f1       	breq	.+68     	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(half, D6) == 0) return 0;	//pause b/w notes
     e88:	67 e9       	ldi	r22, 0x97	; 151
     e8a:	74 e0       	ldi	r23, 0x04	; 4
     e8c:	88 ea       	ldi	r24, 0xA8	; 168
     e8e:	92 e2       	ldi	r25, 0x22	; 34
     e90:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	d1 f0       	breq	.+52     	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     e98:	84 e5       	ldi	r24, 0x54	; 84
     e9a:	91 e1       	ldi	r25, 0x11	; 17
     e9c:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	a1 f0       	breq	.+40     	; 0xecc <playSoundsOfSilence+0x702>
	
	if(doTheThing(full, B5) == 0) return 0;	//pause b/w notes
     ea4:	6b ed       	ldi	r22, 0xDB	; 219
     ea6:	73 e0       	ldi	r23, 0x03	; 3
     ea8:	80 e5       	ldi	r24, 0x50	; 80
     eaa:	95 e4       	ldi	r25, 0x45	; 69
     eac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <doTheThing>
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	61 f0       	breq	.+24     	; 0xecc <playSoundsOfSilence+0x702>
	if(doPause(quarter) == 0) return 0;	//pause b/w notes
     eb4:	84 e5       	ldi	r24, 0x54	; 84
     eb6:	91 e1       	ldi	r25, 0x11	; 17
     eb8:	0e 94 c8 03 	call	0x790	; 0x790 <doPause>
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	31 f0       	breq	.+12     	; 0xecc <playSoundsOfSilence+0x702>
	
	i = 0;
     ec0:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <__data_end>
     ec4:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <__data_end+0x1>
	return 1; 	
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
}
     ecc:	62 96       	adiw	r28, 0x12	; 18
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <doPause2>:
	return 1; 
}

int doPause2(int period) {
	int f = 0; 
	TCE1.PER = period;
     ed8:	e0 e4       	ldi	r30, 0x40	; 64
     eda:	fa e0       	ldi	r31, 0x0A	; 10
     edc:	86 a3       	std	Z+38, r24	; 0x26
     ede:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLFSET = 0x08;	//restart the TC
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	81 87       	std	Z+9, r24	; 0x09
	TCE0_quit();		//break 
     ee4:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
	while(i == 1) {
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <doPause2+0x1a>
		f = keypad_scan();
     eea:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
		if(f != 15){
     eee:	0f 97       	sbiw	r24, 0x0f	; 15
     ef0:	69 f4       	brne	.+26     	; 0xf0c <doPause2+0x34>
int doPause2(int period) {
	int f = 0; 
	TCE1.PER = period;
	TCE1.CTRLFSET = 0x08;	//restart the TC
	TCE0_quit();		//break 
	while(i == 1) {
     ef2:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <__data_end>
     ef6:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <__data_end+0x1>
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	b1 f3       	breq	.-20     	; 0xeea <doPause2+0x12>
		if(f != 15){
			//if keypress changes return from function
			return 0;
		}
	}
	i = 1; 
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     f06:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	return 1; 
     f0a:	08 95       	ret
	TCE0_quit();		//break 
	while(i == 1) {
		f = keypad_scan();
		if(f != 15){
			//if keypress changes return from function
			return 0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	i = 1; 
	return 1; 
}
     f10:	08 95       	ret

00000f12 <playDescScale>:
	
	i = 0;
	return 1; 	
}

int playDescScale() {
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	61 97       	sbiw	r28, 0x11	; 17
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	de bf       	out	0x3e, r29	; 62
	char song1[] = "Descending";
     f20:	8b e0       	ldi	r24, 0x0B	; 11
     f22:	ea e3       	ldi	r30, 0x3A	; 58
     f24:	f0 e2       	ldi	r31, 0x20	; 32
     f26:	de 01       	movw	r26, r28
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	01 90       	ld	r0, Z+
     f2c:	0d 92       	st	X+, r0
     f2e:	8a 95       	dec	r24
     f30:	e1 f7       	brne	.-8      	; 0xf2a <playDescScale+0x18>
	char song2[] = "Scale";
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	e5 e4       	ldi	r30, 0x45	; 69
     f36:	f0 e2       	ldi	r31, 0x20	; 32
     f38:	de 01       	movw	r26, r28
     f3a:	1c 96       	adiw	r26, 0x0c	; 12
     f3c:	01 90       	ld	r0, Z+
     f3e:	0d 92       	st	X+, r0
     f40:	8a 95       	dec	r24
     f42:	e1 f7       	brne	.-8      	; 0xf3c <playDescScale+0x2a>
	printNote(song1, song2);
     f44:	be 01       	movw	r22, r28
     f46:	64 5f       	subi	r22, 0xF4	; 244
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 20 03 	call	0x640	; 0x640 <printNote>
		
	i = 1;	//condition for ISR
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
     f5a:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	
	//first line
	if(doTheThing2(half, C7) == 0) return 0;	//pause b/w notes
     f5e:	6d e2       	ldi	r22, 0x2D	; 45
     f60:	78 e0       	ldi	r23, 0x08	; 8
     f62:	88 ea       	ldi	r24, 0xA8	; 168
     f64:	92 e2       	ldi	r25, 0x22	; 34
     f66:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
     f6a:	89 2b       	or	r24, r25
     f6c:	09 f4       	brne	.+2      	; 0xf70 <playDescScale+0x5e>
     f6e:	82 c0       	rjmp	.+260    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
     f70:	84 e5       	ldi	r24, 0x54	; 84
     f72:	91 e1       	ldi	r25, 0x11	; 17
     f74:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
     f78:	89 2b       	or	r24, r25
     f7a:	09 f4       	brne	.+2      	; 0xf7e <playDescScale+0x6c>
     f7c:	7b c0       	rjmp	.+246    	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, B6) == 0) return 0;	//pause b/w notes
     f7e:	68 eb       	ldi	r22, 0xB8	; 184
     f80:	77 e0       	ldi	r23, 0x07	; 7
     f82:	88 ea       	ldi	r24, 0xA8	; 168
     f84:	92 e2       	ldi	r25, 0x22	; 34
     f86:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
     f8a:	89 2b       	or	r24, r25
     f8c:	09 f4       	brne	.+2      	; 0xf90 <playDescScale+0x7e>
     f8e:	72 c0       	rjmp	.+228    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
     f90:	84 e5       	ldi	r24, 0x54	; 84
     f92:	91 e1       	ldi	r25, 0x11	; 17
     f94:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
     f98:	89 2b       	or	r24, r25
     f9a:	09 f4       	brne	.+2      	; 0xf9e <playDescScale+0x8c>
     f9c:	6b c0       	rjmp	.+214    	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, A6) == 0) return 0;	//pause b/w notes
     f9e:	60 ee       	ldi	r22, 0xE0	; 224
     fa0:	76 e0       	ldi	r23, 0x06	; 6
     fa2:	88 ea       	ldi	r24, 0xA8	; 168
     fa4:	92 e2       	ldi	r25, 0x22	; 34
     fa6:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
     faa:	89 2b       	or	r24, r25
     fac:	09 f4       	brne	.+2      	; 0xfb0 <playDescScale+0x9e>
     fae:	62 c0       	rjmp	.+196    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
     fb0:	84 e5       	ldi	r24, 0x54	; 84
     fb2:	91 e1       	ldi	r25, 0x11	; 17
     fb4:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
     fb8:	89 2b       	or	r24, r25
     fba:	09 f4       	brne	.+2      	; 0xfbe <playDescScale+0xac>
     fbc:	5b c0       	rjmp	.+182    	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, F6) == 0) return 0;	//pause b/w notes
     fbe:	65 e7       	ldi	r22, 0x75	; 117
     fc0:	75 e0       	ldi	r23, 0x05	; 5
     fc2:	88 ea       	ldi	r24, 0xA8	; 168
     fc4:	92 e2       	ldi	r25, 0x22	; 34
     fc6:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
     fca:	89 2b       	or	r24, r25
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <playDescScale+0xbe>
     fce:	52 c0       	rjmp	.+164    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
     fd0:	84 e5       	ldi	r24, 0x54	; 84
     fd2:	91 e1       	ldi	r25, 0x11	; 17
     fd4:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
     fd8:	89 2b       	or	r24, r25
     fda:	09 f4       	brne	.+2      	; 0xfde <playDescScale+0xcc>
     fdc:	4b c0       	rjmp	.+150    	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, E6) == 0) return 0;	//pause b/w notes
     fde:	67 e2       	ldi	r22, 0x27	; 39
     fe0:	75 e0       	ldi	r23, 0x05	; 5
     fe2:	88 ea       	ldi	r24, 0xA8	; 168
     fe4:	92 e2       	ldi	r25, 0x22	; 34
     fe6:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
     fea:	89 2b       	or	r24, r25
     fec:	09 f4       	brne	.+2      	; 0xff0 <playDescScale+0xde>
     fee:	42 c0       	rjmp	.+132    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
     ff0:	84 e5       	ldi	r24, 0x54	; 84
     ff2:	91 e1       	ldi	r25, 0x11	; 17
     ff4:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
     ff8:	89 2b       	or	r24, r25
     ffa:	e1 f1       	breq	.+120    	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, D6) == 0) return 0;	//pause b/w notes
     ffc:	67 e9       	ldi	r22, 0x97	; 151
     ffe:	74 e0       	ldi	r23, 0x04	; 4
    1000:	88 ea       	ldi	r24, 0xA8	; 168
    1002:	92 e2       	ldi	r25, 0x22	; 34
    1004:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
    1008:	89 2b       	or	r24, r25
    100a:	a1 f1       	breq	.+104    	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
    100c:	84 e5       	ldi	r24, 0x54	; 84
    100e:	91 e1       	ldi	r25, 0x11	; 17
    1010:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
    1014:	89 2b       	or	r24, r25
    1016:	71 f1       	breq	.+92     	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, C6) == 0) return 0;	//pause b/w notes
    1018:	67 e1       	ldi	r22, 0x17	; 23
    101a:	74 e0       	ldi	r23, 0x04	; 4
    101c:	88 ea       	ldi	r24, 0xA8	; 168
    101e:	92 e2       	ldi	r25, 0x22	; 34
    1020:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
    1024:	89 2b       	or	r24, r25
    1026:	31 f1       	breq	.+76     	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
    1028:	84 e5       	ldi	r24, 0x54	; 84
    102a:	91 e1       	ldi	r25, 0x11	; 17
    102c:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
    1030:	89 2b       	or	r24, r25
    1032:	01 f1       	breq	.+64     	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, B5) == 0) return 0;	//pause b/w notes
    1034:	6b ed       	ldi	r22, 0xDB	; 219
    1036:	73 e0       	ldi	r23, 0x03	; 3
    1038:	88 ea       	ldi	r24, 0xA8	; 168
    103a:	92 e2       	ldi	r25, 0x22	; 34
    103c:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
    1040:	89 2b       	or	r24, r25
    1042:	c1 f0       	breq	.+48     	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
    1044:	84 e5       	ldi	r24, 0x54	; 84
    1046:	91 e1       	ldi	r25, 0x11	; 17
    1048:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
    104c:	89 2b       	or	r24, r25
    104e:	91 f0       	breq	.+36     	; 0x1074 <playDescScale+0x162>
	
	if(doTheThing2(half, A5) == 0) return 0;	//pause b/w notes
    1050:	60 e7       	ldi	r22, 0x70	; 112
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	88 ea       	ldi	r24, 0xA8	; 168
    1056:	92 e2       	ldi	r25, 0x22	; 34
    1058:	0e 94 a1 03 	call	0x742	; 0x742 <doTheThing2>
    105c:	89 2b       	or	r24, r25
    105e:	51 f0       	breq	.+20     	; 0x1074 <playDescScale+0x162>
	if(doPause2(quarter) == 0) return 0;		//pause b/w notes
    1060:	84 e5       	ldi	r24, 0x54	; 84
    1062:	91 e1       	ldi	r25, 0x11	; 17
    1064:	0e 94 6c 07 	call	0xed8	; 0xed8 <doPause2>
    1068:	89 2b       	or	r24, r25
    106a:	21 f0       	breq	.+8      	; 0x1074 <playDescScale+0x162>
	
	i = 0; 
    106c:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <__data_end>
    1070:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <__data_end+0x1>
	return 0; 
}
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	61 96       	adiw	r28, 0x11	; 17
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <main>:
int doTheThing(int period, int freq);
int doPause2(int period);
int doTheThing2(int period, int freq);

int main(void)
{
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	65 97       	sbiw	r28, 0x15	; 21
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	de bf       	out	0x3e, r29	; 62
	//init EBI for 3 port SRAM mode w/ ALE1
	keypad_init();
    1092:	0e 94 63 01 	call	0x2c6	; 0x2c6 <keypad_init>
	EBI_init();
    1096:	0e 94 49 01 	call	0x292	; 0x292 <EBI_init>
	LCD_init(); 
    109a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_init>
	TCE1_init(); 
    109e:	0e 94 36 01 	call	0x26c	; 0x26c <TCE1_init>
	TCE0_init();
    10a2:	0e 94 26 01 	call	0x24c	; 0x24c <TCE0_init>
	
	PMIC.CTRL = 0x01;	//enable low level interrupts
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();				//set global interrupt 
    10ac:	78 94       	sei

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    10ae:	00 e0       	ldi	r16, 0x00	; 0
    10b0:	1a e0       	ldi	r17, 0x0A	; 10
    10b2:	0f 2e       	mov	r0, r31
    10b4:	f3 ec       	ldi	r31, 0xC3	; 195
    10b6:	af 2e       	mov	r10, r31
    10b8:	bb 24       	eor	r11, r11
    10ba:	b3 94       	inc	r11
    10bc:	f0 2d       	mov	r31, r0
			char freq[] = "1318.51 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(E6);	//play E6
			while(k == 5) k = keypad_scan();	//wait for key to be released
		} else if(k == 6) {
			char note[] = "F6";
    10be:	0f 2e       	mov	r0, r31
    10c0:	f6 e4       	ldi	r31, 0x46	; 70
    10c2:	2f 2e       	mov	r2, r31
    10c4:	f6 e3       	ldi	r31, 0x36	; 54
    10c6:	3f 2e       	mov	r3, r31
    10c8:	41 2c       	mov	r4, r1
    10ca:	f0 2d       	mov	r31, r0
			char freq[] = "1244.51 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(D6_SHARP);	//play D6#
			while(k == 4) k = keypad_scan();	//wait for key to be released
		} else if(k == 5) {
			char note[] = "E6";
    10cc:	0f 2e       	mov	r0, r31
    10ce:	f5 e4       	ldi	r31, 0x45	; 69
    10d0:	6f 2e       	mov	r6, r31
    10d2:	f6 e3       	ldi	r31, 0x36	; 54
    10d4:	7f 2e       	mov	r7, r31
    10d6:	81 2c       	mov	r8, r1
    10d8:	f0 2d       	mov	r31, r0
			char freq[] = "1108.73 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(C6_SHARP);	//play C6#
			while(k == 2) k = keypad_scan();	//wait for key to be released
		} else if(k == 3) {
			char note[] = "D6";
    10da:	0f 2e       	mov	r0, r31
    10dc:	f4 e4       	ldi	r31, 0x44	; 68
    10de:	cf 2e       	mov	r12, r31
    10e0:	f6 e3       	ldi	r31, 0x36	; 54
    10e2:	df 2e       	mov	r13, r31
    10e4:	e1 2c       	mov	r14, r1
    10e6:	f0 2d       	mov	r31, r0
	sei();				//set global interrupt 
	int k = 0; 
	
    while (1) 
    {
		k = keypad_scan(); 
    10e8:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
		while(k == 16) k = keypad_scan(); //poll keypad for input
    10ec:	80 31       	cpi	r24, 0x10	; 16
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <main+0x70>
    10f2:	0a c2       	rjmp	.+1044   	; 0x1508 <main+0x484>
    10f4:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    10f8:	80 31       	cpi	r24, 0x10	; 16
    10fa:	91 05       	cpc	r25, r1
    10fc:	d9 f3       	breq	.-10     	; 0x10f4 <main+0x70>
    10fe:	04 c2       	rjmp	.+1032   	; 0x1508 <main+0x484>
		if(k == 1) {
			char note[] = "C6";
			char freq[] = "1046.5 Hz";
			playNote(note, freq);
			freqToNote(C6);	//play C6
			while(k == 1) k = keypad_scan();	//wait for key to be released
    1100:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	e1 f3       	breq	.-8      	; 0x1100 <main+0x7c>
    1108:	ef cf       	rjmp	.-34     	; 0x10e8 <main+0x64>
		} else if(k == 2) {
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	19 f5       	brne	.+70     	; 0x1156 <main+0xd2>
			char note[] = "C6# / Db6";
    1110:	8a e0       	ldi	r24, 0x0A	; 10
    1112:	eb e4       	ldi	r30, 0x4B	; 75
    1114:	f0 e2       	ldi	r31, 0x20	; 32
    1116:	de 01       	movw	r26, r28
    1118:	1c 96       	adiw	r26, 0x0c	; 12
    111a:	01 90       	ld	r0, Z+
    111c:	0d 92       	st	X+, r0
    111e:	8a 95       	dec	r24
    1120:	e1 f7       	brne	.-8      	; 0x111a <main+0x96>
			char freq[] = "1108.73 Hz";
    1122:	8b e0       	ldi	r24, 0x0B	; 11
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e2       	ldi	r31, 0x20	; 32
    1128:	de 01       	movw	r26, r28
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	01 90       	ld	r0, Z+
    112e:	0d 92       	st	X+, r0
    1130:	8a 95       	dec	r24
    1132:	e1 f7       	brne	.-8      	; 0x112c <main+0xa8>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1134:	be 01       	movw	r22, r28
    1136:	6f 5f       	subi	r22, 0xFF	; 255
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	ce 01       	movw	r24, r28
    113c:	0c 96       	adiw	r24, 0x0c	; 12
    113e:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1142:	85 e8       	ldi	r24, 0x85	; 133
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	f8 01       	movw	r30, r16
    1148:	80 a7       	std	Z+40, r24	; 0x28
    114a:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 2) {
			char note[] = "C6# / Db6";
			char freq[] = "1108.73 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(C6_SHARP);	//play C6#
			while(k == 2) k = keypad_scan();	//wait for key to be released
    114c:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    1150:	02 97       	sbiw	r24, 0x02	; 2
    1152:	e1 f3       	breq	.-8      	; 0x114c <main+0xc8>
    1154:	c9 cf       	rjmp	.-110    	; 0x10e8 <main+0x64>
		} else if(k == 3) {
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	e9 f4       	brne	.+58     	; 0x1196 <main+0x112>
			char note[] = "D6";
    115c:	cc 86       	std	Y+12, r12	; 0x0c
    115e:	dd 86       	std	Y+13, r13	; 0x0d
    1160:	ee 86       	std	Y+14, r14	; 0x0e
			char freq[] = "1174.66 Hz";
    1162:	8b e0       	ldi	r24, 0x0B	; 11
    1164:	e0 e6       	ldi	r30, 0x60	; 96
    1166:	f0 e2       	ldi	r31, 0x20	; 32
    1168:	de 01       	movw	r26, r28
    116a:	11 96       	adiw	r26, 0x01	; 1
    116c:	01 90       	ld	r0, Z+
    116e:	0d 92       	st	X+, r0
    1170:	8a 95       	dec	r24
    1172:	e1 f7       	brne	.-8      	; 0x116c <main+0xe8>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1174:	be 01       	movw	r22, r28
    1176:	6f 5f       	subi	r22, 0xFF	; 255
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	ce 01       	movw	r24, r28
    117c:	0c 96       	adiw	r24, 0x0c	; 12
    117e:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1182:	83 e5       	ldi	r24, 0x53	; 83
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	f8 01       	movw	r30, r16
    1188:	80 a7       	std	Z+40, r24	; 0x28
    118a:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 3) {
			char note[] = "D6";
			char freq[] = "1174.66 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(D6);	//play D6
			while(k == 3) k = keypad_scan();	//wait for key to be released
    118c:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    1190:	03 97       	sbiw	r24, 0x03	; 3
    1192:	e1 f3       	breq	.-8      	; 0x118c <main+0x108>
    1194:	a9 cf       	rjmp	.-174    	; 0x10e8 <main+0x64>
		} else if(k == 4) {
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	91 05       	cpc	r25, r1
    119a:	19 f5       	brne	.+70     	; 0x11e2 <main+0x15e>
			char note[] = "D6# / Eb6";
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	eb e6       	ldi	r30, 0x6B	; 107
    11a0:	f0 e2       	ldi	r31, 0x20	; 32
    11a2:	de 01       	movw	r26, r28
    11a4:	1c 96       	adiw	r26, 0x0c	; 12
    11a6:	01 90       	ld	r0, Z+
    11a8:	0d 92       	st	X+, r0
    11aa:	8a 95       	dec	r24
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <main+0x122>
			char freq[] = "1244.51 Hz";
    11ae:	8b e0       	ldi	r24, 0x0B	; 11
    11b0:	e5 e7       	ldi	r30, 0x75	; 117
    11b2:	f0 e2       	ldi	r31, 0x20	; 32
    11b4:	de 01       	movw	r26, r28
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	01 90       	ld	r0, Z+
    11ba:	0d 92       	st	X+, r0
    11bc:	8a 95       	dec	r24
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <main+0x134>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	0c 96       	adiw	r24, 0x0c	; 12
    11ca:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    11ce:	83 e2       	ldi	r24, 0x23	; 35
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 a7       	std	Z+40, r24	; 0x28
    11d6:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 4) {
			char note[] = "D6# / Eb6";
			char freq[] = "1244.51 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(D6_SHARP);	//play D6#
			while(k == 4) k = keypad_scan();	//wait for key to be released
    11d8:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    11dc:	04 97       	sbiw	r24, 0x04	; 4
    11de:	e1 f3       	breq	.-8      	; 0x11d8 <main+0x154>
    11e0:	83 cf       	rjmp	.-250    	; 0x10e8 <main+0x64>
		} else if(k == 5) {
    11e2:	85 30       	cpi	r24, 0x05	; 5
    11e4:	91 05       	cpc	r25, r1
    11e6:	e9 f4       	brne	.+58     	; 0x1222 <main+0x19e>
			char note[] = "E6";
    11e8:	6c 86       	std	Y+12, r6	; 0x0c
    11ea:	7d 86       	std	Y+13, r7	; 0x0d
    11ec:	8e 86       	std	Y+14, r8	; 0x0e
			char freq[] = "1318.51 Hz";
    11ee:	8b e0       	ldi	r24, 0x0B	; 11
    11f0:	e0 e8       	ldi	r30, 0x80	; 128
    11f2:	f0 e2       	ldi	r31, 0x20	; 32
    11f4:	de 01       	movw	r26, r28
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	8a 95       	dec	r24
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <main+0x174>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1200:	be 01       	movw	r22, r28
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	ce 01       	movw	r24, r28
    1208:	0c 96       	adiw	r24, 0x0c	; 12
    120a:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    120e:	86 ef       	ldi	r24, 0xF6	; 246
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	f8 01       	movw	r30, r16
    1214:	80 a7       	std	Z+40, r24	; 0x28
    1216:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 5) {
			char note[] = "E6";
			char freq[] = "1318.51 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(E6);	//play E6
			while(k == 5) k = keypad_scan();	//wait for key to be released
    1218:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    121c:	05 97       	sbiw	r24, 0x05	; 5
    121e:	e1 f3       	breq	.-8      	; 0x1218 <main+0x194>
    1220:	63 cf       	rjmp	.-314    	; 0x10e8 <main+0x64>
		} else if(k == 6) {
    1222:	86 30       	cpi	r24, 0x06	; 6
    1224:	91 05       	cpc	r25, r1
    1226:	e9 f4       	brne	.+58     	; 0x1262 <main+0x1de>
			char note[] = "F6";
    1228:	2c 86       	std	Y+12, r2	; 0x0c
    122a:	3d 86       	std	Y+13, r3	; 0x0d
    122c:	4e 86       	std	Y+14, r4	; 0x0e
			char freq[] = "1396.91 Hz";
    122e:	8b e0       	ldi	r24, 0x0B	; 11
    1230:	eb e8       	ldi	r30, 0x8B	; 139
    1232:	f0 e2       	ldi	r31, 0x20	; 32
    1234:	de 01       	movw	r26, r28
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	01 90       	ld	r0, Z+
    123a:	0d 92       	st	X+, r0
    123c:	8a 95       	dec	r24
    123e:	e1 f7       	brne	.-8      	; 0x1238 <main+0x1b4>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1240:	be 01       	movw	r22, r28
    1242:	6f 5f       	subi	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	ce 01       	movw	r24, r28
    1248:	0c 96       	adiw	r24, 0x0c	; 12
    124a:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    124e:	8b ec       	ldi	r24, 0xCB	; 203
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	f8 01       	movw	r30, r16
    1254:	80 a7       	std	Z+40, r24	; 0x28
    1256:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 6) {
			char note[] = "F6";
			char freq[] = "1396.91 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(F6);	//play F6
			while(k == 6) k = keypad_scan();	//wait for key to be released
    1258:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    125c:	06 97       	sbiw	r24, 0x06	; 6
    125e:	e1 f3       	breq	.-8      	; 0x1258 <main+0x1d4>
    1260:	43 cf       	rjmp	.-378    	; 0x10e8 <main+0x64>
		} else if(k == 7) {
    1262:	87 30       	cpi	r24, 0x07	; 7
    1264:	91 05       	cpc	r25, r1
    1266:	19 f5       	brne	.+70     	; 0x12ae <main+0x22a>
			char note[] = "F6# / Gb6";
    1268:	8a e0       	ldi	r24, 0x0A	; 10
    126a:	e6 e9       	ldi	r30, 0x96	; 150
    126c:	f0 e2       	ldi	r31, 0x20	; 32
    126e:	de 01       	movw	r26, r28
    1270:	1c 96       	adiw	r26, 0x0c	; 12
    1272:	01 90       	ld	r0, Z+
    1274:	0d 92       	st	X+, r0
    1276:	8a 95       	dec	r24
    1278:	e1 f7       	brne	.-8      	; 0x1272 <main+0x1ee>
			char freq[] = "1479.98 Hz";
    127a:	8b e0       	ldi	r24, 0x0B	; 11
    127c:	e0 ea       	ldi	r30, 0xA0	; 160
    127e:	f0 e2       	ldi	r31, 0x20	; 32
    1280:	de 01       	movw	r26, r28
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	01 90       	ld	r0, Z+
    1286:	0d 92       	st	X+, r0
    1288:	8a 95       	dec	r24
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0x200>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    128c:	be 01       	movw	r22, r28
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	ce 01       	movw	r24, r28
    1294:	0c 96       	adiw	r24, 0x0c	; 12
    1296:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    129a:	83 ea       	ldi	r24, 0xA3	; 163
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	f8 01       	movw	r30, r16
    12a0:	80 a7       	std	Z+40, r24	; 0x28
    12a2:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 7) {
			char note[] = "F6# / Gb6";
			char freq[] = "1479.98 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(F6_SHARP);	//play F6#
			while(k == 7) k = keypad_scan();	//wait for key to be released
    12a4:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    12a8:	07 97       	sbiw	r24, 0x07	; 7
    12aa:	e1 f3       	breq	.-8      	; 0x12a4 <main+0x220>
    12ac:	1d cf       	rjmp	.-454    	; 0x10e8 <main+0x64>
		} else if(k == 8) {
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	91 05       	cpc	r25, r1
    12b2:	01 f5       	brne	.+64     	; 0x12f4 <main+0x270>
			char note[] = "G6";
    12b4:	87 e4       	ldi	r24, 0x47	; 71
    12b6:	96 e3       	ldi	r25, 0x36	; 54
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	8c 87       	std	Y+12, r24	; 0x0c
    12bc:	9d 87       	std	Y+13, r25	; 0x0d
    12be:	ae 87       	std	Y+14, r26	; 0x0e
			char freq[] = "1567.98 Hz";
    12c0:	8b e0       	ldi	r24, 0x0B	; 11
    12c2:	eb ea       	ldi	r30, 0xAB	; 171
    12c4:	f0 e2       	ldi	r31, 0x20	; 32
    12c6:	de 01       	movw	r26, r28
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	01 90       	ld	r0, Z+
    12cc:	0d 92       	st	X+, r0
    12ce:	8a 95       	dec	r24
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <main+0x246>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    12d2:	be 01       	movw	r22, r28
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	ce 01       	movw	r24, r28
    12da:	0c 96       	adiw	r24, 0x0c	; 12
    12dc:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    12e0:	8d e7       	ldi	r24, 0x7D	; 125
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 a7       	std	Z+40, r24	; 0x28
    12e8:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 8) {
			char note[] = "G6";
			char freq[] = "1567.98 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(G6);	//play G6
			while(k == 8) k = keypad_scan();	//wait for key to be released
    12ea:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    12ee:	08 97       	sbiw	r24, 0x08	; 8
    12f0:	e1 f3       	breq	.-8      	; 0x12ea <main+0x266>
    12f2:	fa ce       	rjmp	.-524    	; 0x10e8 <main+0x64>
		} else if(k == 9) {
    12f4:	89 30       	cpi	r24, 0x09	; 9
    12f6:	91 05       	cpc	r25, r1
    12f8:	19 f5       	brne	.+70     	; 0x1340 <main+0x2bc>
			char note[] = "G6# / Ab6";
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	e6 eb       	ldi	r30, 0xB6	; 182
    12fe:	f0 e2       	ldi	r31, 0x20	; 32
    1300:	de 01       	movw	r26, r28
    1302:	1c 96       	adiw	r26, 0x0c	; 12
    1304:	01 90       	ld	r0, Z+
    1306:	0d 92       	st	X+, r0
    1308:	8a 95       	dec	r24
    130a:	e1 f7       	brne	.-8      	; 0x1304 <main+0x280>
			char freq[] = "1661.22 Hz";
    130c:	8b e0       	ldi	r24, 0x0B	; 11
    130e:	e0 ec       	ldi	r30, 0xC0	; 192
    1310:	f0 e2       	ldi	r31, 0x20	; 32
    1312:	de 01       	movw	r26, r28
    1314:	11 96       	adiw	r26, 0x01	; 1
    1316:	01 90       	ld	r0, Z+
    1318:	0d 92       	st	X+, r0
    131a:	8a 95       	dec	r24
    131c:	e1 f7       	brne	.-8      	; 0x1316 <main+0x292>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    131e:	be 01       	movw	r22, r28
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	ce 01       	movw	r24, r28
    1326:	0c 96       	adiw	r24, 0x0c	; 12
    1328:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    132c:	8a e5       	ldi	r24, 0x5A	; 90
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	f8 01       	movw	r30, r16
    1332:	80 a7       	std	Z+40, r24	; 0x28
    1334:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 9) {
			char note[] = "G6# / Ab6";
			char freq[] = "1661.22 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(G6_SHARP);	//play G6#
			while(k == 9) k = keypad_scan();	//wait for key to be released
    1336:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    133a:	09 97       	sbiw	r24, 0x09	; 9
    133c:	e1 f3       	breq	.-8      	; 0x1336 <main+0x2b2>
    133e:	d4 ce       	rjmp	.-600    	; 0x10e8 <main+0x64>
		} else if(k == 0) {
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	01 f5       	brne	.+64     	; 0x1384 <main+0x300>
			char note[] = "A6";
    1344:	81 e4       	ldi	r24, 0x41	; 65
    1346:	96 e3       	ldi	r25, 0x36	; 54
    1348:	a0 e0       	ldi	r26, 0x00	; 0
    134a:	8c 87       	std	Y+12, r24	; 0x0c
    134c:	9d 87       	std	Y+13, r25	; 0x0d
    134e:	ae 87       	std	Y+14, r26	; 0x0e
			char freq[] = "1760.00 Hz";
    1350:	8b e0       	ldi	r24, 0x0B	; 11
    1352:	eb ec       	ldi	r30, 0xCB	; 203
    1354:	f0 e2       	ldi	r31, 0x20	; 32
    1356:	de 01       	movw	r26, r28
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	01 90       	ld	r0, Z+
    135c:	0d 92       	st	X+, r0
    135e:	8a 95       	dec	r24
    1360:	e1 f7       	brne	.-8      	; 0x135a <main+0x2d6>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	ce 01       	movw	r24, r28
    136a:	0c 96       	adiw	r24, 0x0c	; 12
    136c:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1370:	88 e3       	ldi	r24, 0x38	; 56
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	f8 01       	movw	r30, r16
    1376:	80 a7       	std	Z+40, r24	; 0x28
    1378:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 0) {
			char note[] = "A6";
			char freq[] = "1760.00 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(A6);	//play A6
			while(k == 0) k = keypad_scan();	//wait for key to be released
    137a:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    137e:	89 2b       	or	r24, r25
    1380:	e1 f3       	breq	.-8      	; 0x137a <main+0x2f6>
    1382:	b2 ce       	rjmp	.-668    	; 0x10e8 <main+0x64>
		} else if(k == 10) {
    1384:	8a 30       	cpi	r24, 0x0A	; 10
    1386:	91 05       	cpc	r25, r1
    1388:	19 f5       	brne	.+70     	; 0x13d0 <main+0x34c>
			char note[] = "A6# / Bb6";
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	e6 ed       	ldi	r30, 0xD6	; 214
    138e:	f0 e2       	ldi	r31, 0x20	; 32
    1390:	de 01       	movw	r26, r28
    1392:	1c 96       	adiw	r26, 0x0c	; 12
    1394:	01 90       	ld	r0, Z+
    1396:	0d 92       	st	X+, r0
    1398:	8a 95       	dec	r24
    139a:	e1 f7       	brne	.-8      	; 0x1394 <main+0x310>
			char freq[] = "1864.66 Hz";
    139c:	8b e0       	ldi	r24, 0x0B	; 11
    139e:	e0 ee       	ldi	r30, 0xE0	; 224
    13a0:	f0 e2       	ldi	r31, 0x20	; 32
    13a2:	de 01       	movw	r26, r28
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	8a 95       	dec	r24
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <main+0x322>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    13ae:	be 01       	movw	r22, r28
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	ce 01       	movw	r24, r28
    13b6:	0c 96       	adiw	r24, 0x0c	; 12
    13b8:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    13bc:	88 e1       	ldi	r24, 0x18	; 24
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	f8 01       	movw	r30, r16
    13c2:	80 a7       	std	Z+40, r24	; 0x28
    13c4:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 10) {
			char note[] = "A6# / Bb6";
			char freq[] = "1864.66 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(A6_SHARP);	//play A6#
			while(k == 10) k = keypad_scan();	//wait for key to be released
    13c6:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    13ca:	0a 97       	sbiw	r24, 0x0a	; 10
    13cc:	e1 f3       	breq	.-8      	; 0x13c6 <main+0x342>
    13ce:	8c ce       	rjmp	.-744    	; 0x10e8 <main+0x64>
		} else if(k == 11) {
    13d0:	8b 30       	cpi	r24, 0x0B	; 11
    13d2:	91 05       	cpc	r25, r1
    13d4:	01 f5       	brne	.+64     	; 0x1416 <main+0x392>
			char note[] = "B6";
    13d6:	82 e4       	ldi	r24, 0x42	; 66
    13d8:	96 e3       	ldi	r25, 0x36	; 54
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	8c 87       	std	Y+12, r24	; 0x0c
    13de:	9d 87       	std	Y+13, r25	; 0x0d
    13e0:	ae 87       	std	Y+14, r26	; 0x0e
			char freq[] = "1975.33 Hz";
    13e2:	8b e0       	ldi	r24, 0x0B	; 11
    13e4:	eb ee       	ldi	r30, 0xEB	; 235
    13e6:	f0 e2       	ldi	r31, 0x20	; 32
    13e8:	de 01       	movw	r26, r28
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	01 90       	ld	r0, Z+
    13ee:	0d 92       	st	X+, r0
    13f0:	8a 95       	dec	r24
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <main+0x368>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    13f4:	be 01       	movw	r22, r28
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	ce 01       	movw	r24, r28
    13fc:	0c 96       	adiw	r24, 0x0c	; 12
    13fe:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1402:	8a ef       	ldi	r24, 0xFA	; 250
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	f8 01       	movw	r30, r16
    1408:	80 a7       	std	Z+40, r24	; 0x28
    140a:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 11) {
			char note[] = "B6";
			char freq[] = "1975.33 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(B6);	//play B6
			while(k == 11) k = keypad_scan();	//wait for key to be released
    140c:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    1410:	0b 97       	sbiw	r24, 0x0b	; 11
    1412:	e1 f3       	breq	.-8      	; 0x140c <main+0x388>
    1414:	69 ce       	rjmp	.-814    	; 0x10e8 <main+0x64>
		} else if(k == 12) {
    1416:	8c 30       	cpi	r24, 0x0C	; 12
    1418:	91 05       	cpc	r25, r1
    141a:	01 f5       	brne	.+64     	; 0x145c <main+0x3d8>
			char note[] = "C7";
    141c:	83 e4       	ldi	r24, 0x43	; 67
    141e:	97 e3       	ldi	r25, 0x37	; 55
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	8c 87       	std	Y+12, r24	; 0x0c
    1424:	9d 87       	std	Y+13, r25	; 0x0d
    1426:	ae 87       	std	Y+14, r26	; 0x0e
			char freq[] = "2093.00 Hz";
    1428:	8b e0       	ldi	r24, 0x0B	; 11
    142a:	e6 ef       	ldi	r30, 0xF6	; 246
    142c:	f0 e2       	ldi	r31, 0x20	; 32
    142e:	de 01       	movw	r26, r28
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	01 90       	ld	r0, Z+
    1434:	0d 92       	st	X+, r0
    1436:	8a 95       	dec	r24
    1438:	e1 f7       	brne	.-8      	; 0x1432 <main+0x3ae>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    143a:	be 01       	movw	r22, r28
    143c:	6f 5f       	subi	r22, 0xFF	; 255
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	ce 01       	movw	r24, r28
    1442:	0c 96       	adiw	r24, 0x0c	; 12
    1444:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1448:	8d ed       	ldi	r24, 0xDD	; 221
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	f8 01       	movw	r30, r16
    144e:	80 a7       	std	Z+40, r24	; 0x28
    1450:	91 a7       	std	Z+41, r25	; 0x29
		} else if(k == 12) {
			char note[] = "C7";
			char freq[] = "2093.00 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(C7);	//play D6
			while(k == 12) k = keypad_scan();	//wait for key to be released
    1452:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    1456:	0c 97       	sbiw	r24, 0x0c	; 12
    1458:	e1 f3       	breq	.-8      	; 0x1452 <main+0x3ce>
    145a:	46 ce       	rjmp	.-884    	; 0x10e8 <main+0x64>
		} else if(k == 13) {
    145c:	8d 30       	cpi	r24, 0x0D	; 13
    145e:	91 05       	cpc	r25, r1
    1460:	09 f5       	brne	.+66     	; 0x14a4 <main+0x420>
			char note[] = "C7# / Db7";
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	e1 e0       	ldi	r30, 0x01	; 1
    1466:	f1 e2       	ldi	r31, 0x21	; 33
    1468:	de 01       	movw	r26, r28
    146a:	1c 96       	adiw	r26, 0x0c	; 12
    146c:	01 90       	ld	r0, Z+
    146e:	0d 92       	st	X+, r0
    1470:	8a 95       	dec	r24
    1472:	e1 f7       	brne	.-8      	; 0x146c <main+0x3e8>
			char freq[] = "2217.46 Hz";
    1474:	8b e0       	ldi	r24, 0x0B	; 11
    1476:	eb e0       	ldi	r30, 0x0B	; 11
    1478:	f1 e2       	ldi	r31, 0x21	; 33
    147a:	de 01       	movw	r26, r28
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	01 90       	ld	r0, Z+
    1480:	0d 92       	st	X+, r0
    1482:	8a 95       	dec	r24
    1484:	e1 f7       	brne	.-8      	; 0x147e <main+0x3fa>
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
    1486:	be 01       	movw	r22, r28
    1488:	6f 5f       	subi	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	ce 01       	movw	r24, r28
    148e:	0c 96       	adiw	r24, 0x0c	; 12
    1490:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    1494:	f8 01       	movw	r30, r16
    1496:	a0 a6       	std	Z+40, r10	; 0x28
    1498:	b1 a6       	std	Z+41, r11	; 0x29
		} else if(k == 13) {
			char note[] = "C7# / Db7";
			char freq[] = "2217.46 Hz";
			playNote(note, freq);	//function to handle LCD output and interrupt stuff
			freqToNote(C7_SHARP);	//play D6
			while(k == 13) k = keypad_scan();	//wait for key to be released
    149a:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    149e:	0d 97       	sbiw	r24, 0x0d	; 13
    14a0:	e1 f3       	breq	.-8      	; 0x149a <main+0x416>
    14a2:	22 ce       	rjmp	.-956    	; 0x10e8 <main+0x64>
		} else if(k == 14) {
    14a4:	8e 30       	cpi	r24, 0x0E	; 14
    14a6:	91 05       	cpc	r25, r1
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <main+0x434>
			playSoundsOfSilence(); 
    14aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <playSoundsOfSilence>
			while(k == 14) k = keypad_scan();	//wait for key to be released
    14ae:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    14b2:	0e 97       	sbiw	r24, 0x0e	; 14
    14b4:	e1 f3       	breq	.-8      	; 0x14ae <main+0x42a>
    14b6:	18 ce       	rjmp	.-976    	; 0x10e8 <main+0x64>
		} else if(k == 15) {
    14b8:	0f 97       	sbiw	r24, 0x0f	; 15
    14ba:	39 f4       	brne	.+14     	; 0x14ca <main+0x446>
			playDescScale();
    14bc:	0e 94 89 07 	call	0xf12	; 0xf12 <playDescScale>
			while(k == 15) k = keypad_scan();	//wait for key to be released
    14c0:	0e 94 6d 01 	call	0x2da	; 0x2da <keypad_scan>
    14c4:	0f 97       	sbiw	r24, 0x0f	; 15
    14c6:	e1 f3       	breq	.-8      	; 0x14c0 <main+0x43c>
    14c8:	0f ce       	rjmp	.-994    	; 0x10e8 <main+0x64>
		} else {
			//switch not active, turn off counter 
			TCE0_quit();
    14ca:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
    14ce:	0c ce       	rjmp	.-1000   	; 0x10e8 <main+0x64>
		k = keypad_scan(); 
		while(k == 16) k = keypad_scan(); //poll keypad for input
		i = 0;	//set to 0 for ISR to read 
		
		if(k == 1) {
			char note[] = "C6";
    14d0:	83 e4       	ldi	r24, 0x43	; 67
    14d2:	96 e3       	ldi	r25, 0x36	; 54
    14d4:	a0 e0       	ldi	r26, 0x00	; 0
    14d6:	8c 87       	std	Y+12, r24	; 0x0c
    14d8:	9d 87       	std	Y+13, r25	; 0x0d
    14da:	ae 87       	std	Y+14, r26	; 0x0e
			char freq[] = "1046.5 Hz";
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	e6 e1       	ldi	r30, 0x16	; 22
    14e0:	f1 e2       	ldi	r31, 0x21	; 33
    14e2:	de 01       	movw	r26, r28
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	01 90       	ld	r0, Z+
    14e8:	0d 92       	st	X+, r0
    14ea:	8a 95       	dec	r24
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <main+0x462>
			playNote(note, freq);
    14ee:	be 01       	movw	r22, r28
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	ce 01       	movw	r24, r28
    14f6:	0c 96       	adiw	r24, 0x0c	; 12
    14f8:	0e 94 4b 03 	call	0x696	; 0x696 <playNote>

//function to take a frequency and output the correct note
void freqToNote(int freq) {
	double frac = (double)1000/freq;
	double period = (double)frac * 1000;
	TCE0.CCA = (int)period; 
    14fc:	8b eb       	ldi	r24, 0xBB	; 187
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	f8 01       	movw	r30, r16
    1502:	80 a7       	std	Z+40, r24	; 0x28
    1504:	91 a7       	std	Z+41, r25	; 0x29
    1506:	fc cd       	rjmp	.-1032   	; 0x1100 <main+0x7c>
	
    while (1) 
    {
		k = keypad_scan(); 
		while(k == 16) k = keypad_scan(); //poll keypad for input
		i = 0;	//set to 0 for ISR to read 
    1508:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <__data_end>
    150c:	10 92 21 21 	sts	0x2121, r1	; 0x802121 <__data_end+0x1>
		
		if(k == 1) {
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	09 f0       	breq	.+2      	; 0x1518 <main+0x494>
    1516:	f9 cd       	rjmp	.-1038   	; 0x110a <main+0x86>
    1518:	db cf       	rjmp	.-74     	; 0x14d0 <main+0x44c>

0000151a <__vector_53>:
	}
	i = 1; 
	return 1; 
}

ISR(TCE1_OVF_vect) {
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	08 b6       	in	r0, 0x38	; 56
    1526:	0f 92       	push	r0
    1528:	18 be       	out	0x38, r1	; 56
    152a:	09 b6       	in	r0, 0x39	; 57
    152c:	0f 92       	push	r0
    152e:	19 be       	out	0x39, r1	; 57
    1530:	0b b6       	in	r0, 0x3b	; 59
    1532:	0f 92       	push	r0
    1534:	1b be       	out	0x3b, r1	; 59
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
	if(i == 0){
    154e:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <__data_end>
    1552:	90 91 21 21 	lds	r25, 0x2121	; 0x802121 <__data_end+0x1>
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	19 f4       	brne	.+6      	; 0x1560 <__vector_53+0x46>
		TCE0_quit();
    155a:	0e 94 42 01 	call	0x284	; 0x284 <TCE0_quit>
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <__vector_53+0x56>
	} else if(i == 1) {
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	31 f4       	brne	.+12     	; 0x1570 <__vector_53+0x56>
		i = 2;		//increment i so loop will break and song will continue
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <__data_end>
    156c:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <__data_end+0x1>
	}
	
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0b be       	out	0x3b, r0	; 59
    158c:	0f 90       	pop	r0
    158e:	09 be       	out	0x39, r0	; 57
    1590:	0f 90       	pop	r0
    1592:	08 be       	out	0x38, r0	; 56
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <__divsf3>:
    159e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__divsf3x>
    15a2:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_round>
    15a6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__fp_pscB>
    15aa:	58 f0       	brcs	.+22     	; 0x15c2 <__divsf3+0x24>
    15ac:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_pscA>
    15b0:	40 f0       	brcs	.+16     	; 0x15c2 <__divsf3+0x24>
    15b2:	29 f4       	brne	.+10     	; 0x15be <__divsf3+0x20>
    15b4:	5f 3f       	cpi	r21, 0xFF	; 255
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__divsf3+0x24>
    15b8:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_inf>
    15bc:	51 11       	cpse	r21, r1
    15be:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_szero>
    15c2:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_nan>

000015c6 <__divsf3x>:
    15c6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_split3>
    15ca:	68 f3       	brcs	.-38     	; 0x15a6 <__divsf3+0x8>

000015cc <__divsf3_pse>:
    15cc:	99 23       	and	r25, r25
    15ce:	b1 f3       	breq	.-20     	; 0x15bc <__divsf3+0x1e>
    15d0:	55 23       	and	r21, r21
    15d2:	91 f3       	breq	.-28     	; 0x15b8 <__divsf3+0x1a>
    15d4:	95 1b       	sub	r25, r21
    15d6:	55 0b       	sbc	r21, r21
    15d8:	bb 27       	eor	r27, r27
    15da:	aa 27       	eor	r26, r26
    15dc:	62 17       	cp	r22, r18
    15de:	73 07       	cpc	r23, r19
    15e0:	84 07       	cpc	r24, r20
    15e2:	38 f0       	brcs	.+14     	; 0x15f2 <__divsf3_pse+0x26>
    15e4:	9f 5f       	subi	r25, 0xFF	; 255
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	22 0f       	add	r18, r18
    15ea:	33 1f       	adc	r19, r19
    15ec:	44 1f       	adc	r20, r20
    15ee:	aa 1f       	adc	r26, r26
    15f0:	a9 f3       	breq	.-22     	; 0x15dc <__divsf3_pse+0x10>
    15f2:	35 d0       	rcall	.+106    	; 0x165e <__divsf3_pse+0x92>
    15f4:	0e 2e       	mov	r0, r30
    15f6:	3a f0       	brmi	.+14     	; 0x1606 <__divsf3_pse+0x3a>
    15f8:	e0 e8       	ldi	r30, 0x80	; 128
    15fa:	32 d0       	rcall	.+100    	; 0x1660 <__divsf3_pse+0x94>
    15fc:	91 50       	subi	r25, 0x01	; 1
    15fe:	50 40       	sbci	r21, 0x00	; 0
    1600:	e6 95       	lsr	r30
    1602:	00 1c       	adc	r0, r0
    1604:	ca f7       	brpl	.-14     	; 0x15f8 <__divsf3_pse+0x2c>
    1606:	2b d0       	rcall	.+86     	; 0x165e <__divsf3_pse+0x92>
    1608:	fe 2f       	mov	r31, r30
    160a:	29 d0       	rcall	.+82     	; 0x165e <__divsf3_pse+0x92>
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	bb 1f       	adc	r27, r27
    1614:	26 17       	cp	r18, r22
    1616:	37 07       	cpc	r19, r23
    1618:	48 07       	cpc	r20, r24
    161a:	ab 07       	cpc	r26, r27
    161c:	b0 e8       	ldi	r27, 0x80	; 128
    161e:	09 f0       	breq	.+2      	; 0x1622 <__divsf3_pse+0x56>
    1620:	bb 0b       	sbc	r27, r27
    1622:	80 2d       	mov	r24, r0
    1624:	bf 01       	movw	r22, r30
    1626:	ff 27       	eor	r31, r31
    1628:	93 58       	subi	r25, 0x83	; 131
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	3a f0       	brmi	.+14     	; 0x163c <__divsf3_pse+0x70>
    162e:	9e 3f       	cpi	r25, 0xFE	; 254
    1630:	51 05       	cpc	r21, r1
    1632:	78 f0       	brcs	.+30     	; 0x1652 <__divsf3_pse+0x86>
    1634:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_inf>
    1638:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_szero>
    163c:	5f 3f       	cpi	r21, 0xFF	; 255
    163e:	e4 f3       	brlt	.-8      	; 0x1638 <__divsf3_pse+0x6c>
    1640:	98 3e       	cpi	r25, 0xE8	; 232
    1642:	d4 f3       	brlt	.-12     	; 0x1638 <__divsf3_pse+0x6c>
    1644:	86 95       	lsr	r24
    1646:	77 95       	ror	r23
    1648:	67 95       	ror	r22
    164a:	b7 95       	ror	r27
    164c:	f7 95       	ror	r31
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__divsf3_pse+0x78>
    1652:	88 0f       	add	r24, r24
    1654:	91 1d       	adc	r25, r1
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret
    165e:	e1 e0       	ldi	r30, 0x01	; 1
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	bb 1f       	adc	r27, r27
    1668:	62 17       	cp	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 07       	cpc	r24, r20
    166e:	ba 07       	cpc	r27, r26
    1670:	20 f0       	brcs	.+8      	; 0x167a <__divsf3_pse+0xae>
    1672:	62 1b       	sub	r22, r18
    1674:	73 0b       	sbc	r23, r19
    1676:	84 0b       	sbc	r24, r20
    1678:	ba 0b       	sbc	r27, r26
    167a:	ee 1f       	adc	r30, r30
    167c:	88 f7       	brcc	.-30     	; 0x1660 <__divsf3_pse+0x94>
    167e:	e0 95       	com	r30
    1680:	08 95       	ret

00001682 <__fixsfsi>:
    1682:	0e 94 48 0b 	call	0x1690	; 0x1690 <__fixunssfsi>
    1686:	68 94       	set
    1688:	b1 11       	cpse	r27, r1
    168a:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_szero>
    168e:	08 95       	ret

00001690 <__fixunssfsi>:
    1690:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_splitA>
    1694:	88 f0       	brcs	.+34     	; 0x16b8 <__fixunssfsi+0x28>
    1696:	9f 57       	subi	r25, 0x7F	; 127
    1698:	98 f0       	brcs	.+38     	; 0x16c0 <__fixunssfsi+0x30>
    169a:	b9 2f       	mov	r27, r25
    169c:	99 27       	eor	r25, r25
    169e:	b7 51       	subi	r27, 0x17	; 23
    16a0:	b0 f0       	brcs	.+44     	; 0x16ce <__fixunssfsi+0x3e>
    16a2:	e1 f0       	breq	.+56     	; 0x16dc <__fixunssfsi+0x4c>
    16a4:	66 0f       	add	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	1a f0       	brmi	.+6      	; 0x16b4 <__fixunssfsi+0x24>
    16ae:	ba 95       	dec	r27
    16b0:	c9 f7       	brne	.-14     	; 0x16a4 <__fixunssfsi+0x14>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <__fixunssfsi+0x4c>
    16b4:	b1 30       	cpi	r27, 0x01	; 1
    16b6:	91 f0       	breq	.+36     	; 0x16dc <__fixunssfsi+0x4c>
    16b8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__fp_zero>
    16bc:	b1 e0       	ldi	r27, 0x01	; 1
    16be:	08 95       	ret
    16c0:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__fp_zero>
    16c4:	67 2f       	mov	r22, r23
    16c6:	78 2f       	mov	r23, r24
    16c8:	88 27       	eor	r24, r24
    16ca:	b8 5f       	subi	r27, 0xF8	; 248
    16cc:	39 f0       	breq	.+14     	; 0x16dc <__fixunssfsi+0x4c>
    16ce:	b9 3f       	cpi	r27, 0xF9	; 249
    16d0:	cc f3       	brlt	.-14     	; 0x16c4 <__fixunssfsi+0x34>
    16d2:	86 95       	lsr	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b3 95       	inc	r27
    16da:	d9 f7       	brne	.-10     	; 0x16d2 <__fixunssfsi+0x42>
    16dc:	3e f4       	brtc	.+14     	; 0x16ec <__fixunssfsi+0x5c>
    16de:	90 95       	com	r25
    16e0:	80 95       	com	r24
    16e2:	70 95       	com	r23
    16e4:	61 95       	neg	r22
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	08 95       	ret

000016ee <__floatunsisf>:
    16ee:	e8 94       	clt
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <__floatsisf+0x12>

000016f2 <__floatsisf>:
    16f2:	97 fb       	bst	r25, 7
    16f4:	3e f4       	brtc	.+14     	; 0x1704 <__floatsisf+0x12>
    16f6:	90 95       	com	r25
    16f8:	80 95       	com	r24
    16fa:	70 95       	com	r23
    16fc:	61 95       	neg	r22
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	8f 4f       	sbci	r24, 0xFF	; 255
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	99 23       	and	r25, r25
    1706:	a9 f0       	breq	.+42     	; 0x1732 <__floatsisf+0x40>
    1708:	f9 2f       	mov	r31, r25
    170a:	96 e9       	ldi	r25, 0x96	; 150
    170c:	bb 27       	eor	r27, r27
    170e:	93 95       	inc	r25
    1710:	f6 95       	lsr	r31
    1712:	87 95       	ror	r24
    1714:	77 95       	ror	r23
    1716:	67 95       	ror	r22
    1718:	b7 95       	ror	r27
    171a:	f1 11       	cpse	r31, r1
    171c:	f8 cf       	rjmp	.-16     	; 0x170e <__floatsisf+0x1c>
    171e:	fa f4       	brpl	.+62     	; 0x175e <__floatsisf+0x6c>
    1720:	bb 0f       	add	r27, r27
    1722:	11 f4       	brne	.+4      	; 0x1728 <__floatsisf+0x36>
    1724:	60 ff       	sbrs	r22, 0
    1726:	1b c0       	rjmp	.+54     	; 0x175e <__floatsisf+0x6c>
    1728:	6f 5f       	subi	r22, 0xFF	; 255
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	8f 4f       	sbci	r24, 0xFF	; 255
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	16 c0       	rjmp	.+44     	; 0x175e <__floatsisf+0x6c>
    1732:	88 23       	and	r24, r24
    1734:	11 f0       	breq	.+4      	; 0x173a <__floatsisf+0x48>
    1736:	96 e9       	ldi	r25, 0x96	; 150
    1738:	11 c0       	rjmp	.+34     	; 0x175c <__floatsisf+0x6a>
    173a:	77 23       	and	r23, r23
    173c:	21 f0       	breq	.+8      	; 0x1746 <__floatsisf+0x54>
    173e:	9e e8       	ldi	r25, 0x8E	; 142
    1740:	87 2f       	mov	r24, r23
    1742:	76 2f       	mov	r23, r22
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <__floatsisf+0x5e>
    1746:	66 23       	and	r22, r22
    1748:	71 f0       	breq	.+28     	; 0x1766 <__floatsisf+0x74>
    174a:	96 e8       	ldi	r25, 0x86	; 134
    174c:	86 2f       	mov	r24, r22
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	2a f0       	brmi	.+10     	; 0x175e <__floatsisf+0x6c>
    1754:	9a 95       	dec	r25
    1756:	66 0f       	add	r22, r22
    1758:	77 1f       	adc	r23, r23
    175a:	88 1f       	adc	r24, r24
    175c:	da f7       	brpl	.-10     	; 0x1754 <__floatsisf+0x62>
    175e:	88 0f       	add	r24, r24
    1760:	96 95       	lsr	r25
    1762:	87 95       	ror	r24
    1764:	97 f9       	bld	r25, 7
    1766:	08 95       	ret

00001768 <__fp_inf>:
    1768:	97 f9       	bld	r25, 7
    176a:	9f 67       	ori	r25, 0x7F	; 127
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	08 95       	ret

00001774 <__fp_nan>:
    1774:	9f ef       	ldi	r25, 0xFF	; 255
    1776:	80 ec       	ldi	r24, 0xC0	; 192
    1778:	08 95       	ret

0000177a <__fp_pscA>:
    177a:	00 24       	eor	r0, r0
    177c:	0a 94       	dec	r0
    177e:	16 16       	cp	r1, r22
    1780:	17 06       	cpc	r1, r23
    1782:	18 06       	cpc	r1, r24
    1784:	09 06       	cpc	r0, r25
    1786:	08 95       	ret

00001788 <__fp_pscB>:
    1788:	00 24       	eor	r0, r0
    178a:	0a 94       	dec	r0
    178c:	12 16       	cp	r1, r18
    178e:	13 06       	cpc	r1, r19
    1790:	14 06       	cpc	r1, r20
    1792:	05 06       	cpc	r0, r21
    1794:	08 95       	ret

00001796 <__fp_round>:
    1796:	09 2e       	mov	r0, r25
    1798:	03 94       	inc	r0
    179a:	00 0c       	add	r0, r0
    179c:	11 f4       	brne	.+4      	; 0x17a2 <__fp_round+0xc>
    179e:	88 23       	and	r24, r24
    17a0:	52 f0       	brmi	.+20     	; 0x17b6 <__fp_round+0x20>
    17a2:	bb 0f       	add	r27, r27
    17a4:	40 f4       	brcc	.+16     	; 0x17b6 <__fp_round+0x20>
    17a6:	bf 2b       	or	r27, r31
    17a8:	11 f4       	brne	.+4      	; 0x17ae <__fp_round+0x18>
    17aa:	60 ff       	sbrs	r22, 0
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__fp_round+0x20>
    17ae:	6f 5f       	subi	r22, 0xFF	; 255
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	08 95       	ret

000017b8 <__fp_split3>:
    17b8:	57 fd       	sbrc	r21, 7
    17ba:	90 58       	subi	r25, 0x80	; 128
    17bc:	44 0f       	add	r20, r20
    17be:	55 1f       	adc	r21, r21
    17c0:	59 f0       	breq	.+22     	; 0x17d8 <__fp_splitA+0x10>
    17c2:	5f 3f       	cpi	r21, 0xFF	; 255
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <__fp_splitA+0x1a>
    17c6:	47 95       	ror	r20

000017c8 <__fp_splitA>:
    17c8:	88 0f       	add	r24, r24
    17ca:	97 fb       	bst	r25, 7
    17cc:	99 1f       	adc	r25, r25
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <__fp_splitA+0x20>
    17d0:	9f 3f       	cpi	r25, 0xFF	; 255
    17d2:	79 f0       	breq	.+30     	; 0x17f2 <__fp_splitA+0x2a>
    17d4:	87 95       	ror	r24
    17d6:	08 95       	ret
    17d8:	12 16       	cp	r1, r18
    17da:	13 06       	cpc	r1, r19
    17dc:	14 06       	cpc	r1, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	f2 cf       	rjmp	.-28     	; 0x17c6 <__fp_split3+0xe>
    17e2:	46 95       	lsr	r20
    17e4:	f1 df       	rcall	.-30     	; 0x17c8 <__fp_splitA>
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <__fp_splitA+0x30>
    17e8:	16 16       	cp	r1, r22
    17ea:	17 06       	cpc	r1, r23
    17ec:	18 06       	cpc	r1, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	f1 cf       	rjmp	.-30     	; 0x17d4 <__fp_splitA+0xc>
    17f2:	86 95       	lsr	r24
    17f4:	71 05       	cpc	r23, r1
    17f6:	61 05       	cpc	r22, r1
    17f8:	08 94       	sec
    17fa:	08 95       	ret

000017fc <__fp_zero>:
    17fc:	e8 94       	clt

000017fe <__fp_szero>:
    17fe:	bb 27       	eor	r27, r27
    1800:	66 27       	eor	r22, r22
    1802:	77 27       	eor	r23, r23
    1804:	cb 01       	movw	r24, r22
    1806:	97 f9       	bld	r25, 7
    1808:	08 95       	ret

0000180a <__mulsf3>:
    180a:	0e 94 18 0c 	call	0x1830	; 0x1830 <__mulsf3x>
    180e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_round>
    1812:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_pscA>
    1816:	38 f0       	brcs	.+14     	; 0x1826 <__mulsf3+0x1c>
    1818:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__fp_pscB>
    181c:	20 f0       	brcs	.+8      	; 0x1826 <__mulsf3+0x1c>
    181e:	95 23       	and	r25, r21
    1820:	11 f0       	breq	.+4      	; 0x1826 <__mulsf3+0x1c>
    1822:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_inf>
    1826:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__fp_nan>
    182a:	11 24       	eor	r1, r1
    182c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_szero>

00001830 <__mulsf3x>:
    1830:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_split3>
    1834:	70 f3       	brcs	.-36     	; 0x1812 <__mulsf3+0x8>

00001836 <__mulsf3_pse>:
    1836:	95 9f       	mul	r25, r21
    1838:	c1 f3       	breq	.-16     	; 0x182a <__mulsf3+0x20>
    183a:	95 0f       	add	r25, r21
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	55 1f       	adc	r21, r21
    1840:	62 9f       	mul	r22, r18
    1842:	f0 01       	movw	r30, r0
    1844:	72 9f       	mul	r23, r18
    1846:	bb 27       	eor	r27, r27
    1848:	f0 0d       	add	r31, r0
    184a:	b1 1d       	adc	r27, r1
    184c:	63 9f       	mul	r22, r19
    184e:	aa 27       	eor	r26, r26
    1850:	f0 0d       	add	r31, r0
    1852:	b1 1d       	adc	r27, r1
    1854:	aa 1f       	adc	r26, r26
    1856:	64 9f       	mul	r22, r20
    1858:	66 27       	eor	r22, r22
    185a:	b0 0d       	add	r27, r0
    185c:	a1 1d       	adc	r26, r1
    185e:	66 1f       	adc	r22, r22
    1860:	82 9f       	mul	r24, r18
    1862:	22 27       	eor	r18, r18
    1864:	b0 0d       	add	r27, r0
    1866:	a1 1d       	adc	r26, r1
    1868:	62 1f       	adc	r22, r18
    186a:	73 9f       	mul	r23, r19
    186c:	b0 0d       	add	r27, r0
    186e:	a1 1d       	adc	r26, r1
    1870:	62 1f       	adc	r22, r18
    1872:	83 9f       	mul	r24, r19
    1874:	a0 0d       	add	r26, r0
    1876:	61 1d       	adc	r22, r1
    1878:	22 1f       	adc	r18, r18
    187a:	74 9f       	mul	r23, r20
    187c:	33 27       	eor	r19, r19
    187e:	a0 0d       	add	r26, r0
    1880:	61 1d       	adc	r22, r1
    1882:	23 1f       	adc	r18, r19
    1884:	84 9f       	mul	r24, r20
    1886:	60 0d       	add	r22, r0
    1888:	21 1d       	adc	r18, r1
    188a:	82 2f       	mov	r24, r18
    188c:	76 2f       	mov	r23, r22
    188e:	6a 2f       	mov	r22, r26
    1890:	11 24       	eor	r1, r1
    1892:	9f 57       	subi	r25, 0x7F	; 127
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	9a f0       	brmi	.+38     	; 0x18be <__mulsf3_pse+0x88>
    1898:	f1 f0       	breq	.+60     	; 0x18d6 <__mulsf3_pse+0xa0>
    189a:	88 23       	and	r24, r24
    189c:	4a f0       	brmi	.+18     	; 0x18b0 <__mulsf3_pse+0x7a>
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	bb 1f       	adc	r27, r27
    18a4:	66 1f       	adc	r22, r22
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 1f       	adc	r24, r24
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	50 40       	sbci	r21, 0x00	; 0
    18ae:	a9 f7       	brne	.-22     	; 0x189a <__mulsf3_pse+0x64>
    18b0:	9e 3f       	cpi	r25, 0xFE	; 254
    18b2:	51 05       	cpc	r21, r1
    18b4:	80 f0       	brcs	.+32     	; 0x18d6 <__mulsf3_pse+0xa0>
    18b6:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__fp_inf>
    18ba:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__fp_szero>
    18be:	5f 3f       	cpi	r21, 0xFF	; 255
    18c0:	e4 f3       	brlt	.-8      	; 0x18ba <__mulsf3_pse+0x84>
    18c2:	98 3e       	cpi	r25, 0xE8	; 232
    18c4:	d4 f3       	brlt	.-12     	; 0x18ba <__mulsf3_pse+0x84>
    18c6:	86 95       	lsr	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	e7 95       	ror	r30
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	c1 f7       	brne	.-16     	; 0x18c6 <__mulsf3_pse+0x90>
    18d6:	fe 2b       	or	r31, r30
    18d8:	88 0f       	add	r24, r24
    18da:	91 1d       	adc	r25, r1
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	97 f9       	bld	r25, 7
    18e2:	08 95       	ret

000018e4 <_exit>:
    18e4:	f8 94       	cli

000018e6 <__stop_program>:
    18e6:	ff cf       	rjmp	.-2      	; 0x18e6 <__stop_program>
