
Lab5_lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00802000  00000f14  00000f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001546  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000339  00000000  00000000  0000264e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000837  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009be  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b25  00000000  00000000  00003dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00004903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 e1       	ldi	r30, 0x14	; 20
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a8 37       	cpi	r26, 0x78	; 120
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 c9 04 	call	0x992	; 0x992 <main>
 234:	0c 94 88 07 	jmp	0xf10	; 0xf10 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <_Z14RoughDelay1secv>:
	return ((f / 128.0) * 5);
}

float diffTen(float volt, int sub) {
	return ((volt - sub) * 10);
}
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <_Z14RoughDelay1secv+0x6>
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	19 82       	std	Y+1, r1	; 0x01
 24a:	1a 82       	std	Y+2, r1	; 0x02
 24c:	1b 82       	std	Y+3, r1	; 0x03
 24e:	1c 82       	std	Y+4, r1	; 0x04
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	ab 81       	ldd	r26, Y+3	; 0x03
 256:	bc 81       	ldd	r27, Y+4	; 0x04
 258:	81 32       	cpi	r24, 0x21	; 33
 25a:	9e 44       	sbci	r25, 0x4E	; 78
 25c:	a1 05       	cpc	r26, r1
 25e:	b1 05       	cpc	r27, r1
 260:	a0 f4       	brcc	.+40     	; 0x28a <_Z14RoughDelay1secv+0x4e>
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	ab 81       	ldd	r26, Y+3	; 0x03
 268:	bc 81       	ldd	r27, Y+4	; 0x04
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	ab 83       	std	Y+3, r26	; 0x03
 276:	bc 83       	std	Y+4, r27	; 0x04
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	ab 81       	ldd	r26, Y+3	; 0x03
 27e:	bc 81       	ldd	r27, Y+4	; 0x04
 280:	81 32       	cpi	r24, 0x21	; 33
 282:	9e 44       	sbci	r25, 0x4E	; 78
 284:	a1 05       	cpc	r26, r1
 286:	b1 05       	cpc	r27, r1
 288:	60 f3       	brcs	.-40     	; 0x262 <_Z14RoughDelay1secv+0x26>
 28a:	24 96       	adiw	r28, 0x04	; 4
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	de bf       	out	0x3e, r29	; 62
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <_Z8EBI_initv>:
 296:	e0 ee       	ldi	r30, 0xE0	; 224
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	87 e3       	ldi	r24, 0x37	; 55
 29c:	80 83       	st	Z, r24
 29e:	83 e3       	ldi	r24, 0x33	; 51
 2a0:	84 83       	std	Z+4, r24	; 0x04
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
 2a8:	e0 e4       	ldi	r30, 0x40	; 64
 2aa:	f4 e0       	ldi	r31, 0x04	; 4
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	83 8b       	std	Z+19, r24	; 0x13
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	82 8b       	std	Z+18, r24	; 0x12
 2b8:	85 e1       	ldi	r24, 0x15	; 21
 2ba:	80 8b       	std	Z+16, r24	; 0x10
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	99 e3       	ldi	r25, 0x39	; 57
 2c0:	86 8b       	std	Z+22, r24	; 0x16
 2c2:	97 8b       	std	Z+23, r25	; 0x17
 2c4:	89 e1       	ldi	r24, 0x19	; 25
 2c6:	84 8b       	std	Z+20, r24	; 0x14
 2c8:	08 95       	ret

000002ca <_Z8ADC_initv>:
 2ca:	e0 e4       	ldi	r30, 0x40	; 64
 2cc:	f2 e0       	ldi	r31, 0x02	; 2
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	82 83       	std	Z+2, r24	; 0x02
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	80 83       	st	Z, r24
 2d6:	8c e1       	ldi	r24, 0x1C	; 28
 2d8:	81 83       	std	Z+1, r24	; 0x01
 2da:	81 e8       	ldi	r24, 0x81	; 129
 2dc:	80 a3       	std	Z+32, r24	; 0x20
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	82 a3       	std	Z+34, r24	; 0x22
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	81 a3       	std	Z+33, r24	; 0x21
 2e6:	08 95       	ret

000002e8 <_Z12ADC_init_CH1v>:
 2e8:	e0 e4       	ldi	r30, 0x40	; 64
 2ea:	f2 e0       	ldi	r31, 0x02	; 2
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	82 83       	std	Z+2, r24	; 0x02
 2f0:	89 e0       	ldi	r24, 0x09	; 9
 2f2:	80 83       	st	Z, r24
 2f4:	8c e1       	ldi	r24, 0x1C	; 28
 2f6:	81 83       	std	Z+1, r24	; 0x01
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	83 83       	std	Z+3, r24	; 0x03
 2fc:	81 e8       	ldi	r24, 0x81	; 129
 2fe:	80 a7       	std	Z+40, r24	; 0x28
 300:	88 e2       	ldi	r24, 0x28	; 40
 302:	81 a7       	std	Z+41, r24	; 0x29
 304:	08 95       	ret

00000306 <_Z7toAsciii>:
 306:	8a 30       	cpi	r24, 0x0A	; 10
 308:	91 05       	cpc	r25, r1
 30a:	14 f4       	brge	.+4      	; 0x310 <_Z7toAsciii+0xa>
 30c:	c0 96       	adiw	r24, 0x30	; 48
 30e:	08 95       	ret
 310:	c7 96       	adiw	r24, 0x37	; 55
 312:	08 95       	ret

00000314 <_Z8pollBusyv>:

void pollBusy()
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	//create variable to hold data read from LCD
	volatile uint8_t readLCD_8;
	
	//allow two cycles for busy flag to be set
	//as said in part A section 4 of lab doc
	asm volatile ("nop");
 31e:	00 00       	nop
	asm volatile ("nop");
 320:	00 00       	nop
	
	// read to determine if DB7 is still set
	readLCD_8 = __far_mem_read(LCD_Command);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e5       	ldi	r25, 0x50	; 80
 326:	a9 e3       	ldi	r26, 0x39	; 57
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	0b b6       	in	r0, 0x3b	; 59
 32c:	ab bf       	out	0x3b, r26	; 59
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
 332:	0b be       	out	0x3b, r0	; 59
 334:	89 83       	std	Y+1, r24	; 0x01

	//while DB7 is set, read and check new value
	//this will spin until the busy flag is no longer 1
	while(readLCD_8 > 0x7F){
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	88 23       	and	r24, r24
 33a:	6c f4       	brge	.+26     	; 0x356 <_Z8pollBusyv+0x42>
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 e5       	ldi	r21, 0x50	; 80
 340:	69 e3       	ldi	r22, 0x39	; 57
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0b b6       	in	r0, 0x3b	; 59
 346:	6b bf       	out	0x3b, r22	; 59
 348:	fa 01       	movw	r30, r20
 34a:	80 81       	ld	r24, Z
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	89 83       	std	Y+1, r24	; 0x01
	// read to determine if DB7 is still set
	readLCD_8 = __far_mem_read(LCD_Command);

	//while DB7 is set, read and check new value
	//this will spin until the busy flag is no longer 1
	while(readLCD_8 > 0x7F){
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	88 23       	and	r24, r24
 354:	bc f3       	brlt	.-18     	; 0x344 <_Z8pollBusyv+0x30>
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
	}
}
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <_Z10toggle_LCDi>:
		key = keypad_scan(); 
	}
}

void toggle_LCD(int flip) {
	if(flip == 0) {
 35e:	89 2b       	or	r24, r25
 360:	79 f4       	brne	.+30     	; 0x380 <_Z10toggle_LCDi+0x22>
		pollBusy();
 362:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		__far_mem_write(LCD_Command, 0x0F);	//LCD ON
 366:	2f e0       	ldi	r18, 0x0F	; 15
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e5       	ldi	r25, 0x50	; 80
 36c:	a9 e3       	ldi	r26, 0x39	; 57
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	0b b6       	in	r0, 0x3b	; 59
 372:	ab bf       	out	0x3b, r26	; 59
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
 378:	0b be       	out	0x3b, r0	; 59
		pollBusy();
 37a:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
 37e:	0e c0       	rjmp	.+28     	; 0x39c <_Z10toggle_LCDi+0x3e>
	} else {
		pollBusy();
 380:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		__far_mem_write(LCD_Command, 0x08); //LCD OFF
 384:	28 e0       	ldi	r18, 0x08	; 8
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e5       	ldi	r25, 0x50	; 80
 38a:	a9 e3       	ldi	r26, 0x39	; 57
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	ab bf       	out	0x3b, r26	; 59
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
 396:	0b be       	out	0x3b, r0	; 59
		pollBusy();
 398:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	}
	RoughDelay1sec(); 
 39c:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z14RoughDelay1secv>
 3a0:	08 95       	ret

000003a2 <_Z7outCharc>:
		//read from LCD_Command again
		readLCD_8 = __far_mem_read(LCD_Command);
	}
}

void outChar(char c) {
 3a2:	cf 93       	push	r28
 3a4:	c8 2f       	mov	r28, r24
	pollBusy();	//wait til BF not set
 3a6:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	__far_mem_write(LCD_Data, c);	//write to data the character passed in
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	50 e5       	ldi	r21, 0x50	; 80
 3ae:	69 e3       	ldi	r22, 0x39	; 57
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0b b6       	in	r0, 0x3b	; 59
 3b4:	6b bf       	out	0x3b, r22	; 59
 3b6:	fa 01       	movw	r30, r20
 3b8:	c0 83       	st	Z, r28
 3ba:	0b be       	out	0x3b, r0	; 59
}
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <_Z9outStringPc>:

void outString(char *str) {
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ec 01       	movw	r28, r24
	//counter for index
	int index = 0;
	//until we've reached the end of our string
	while(str[index] != '\0') {
 3c6:	88 81       	ld	r24, Y
 3c8:	88 23       	and	r24, r24
 3ca:	41 f0       	breq	.+16     	; 0x3dc <_Z9outStringPc+0x1c>
 3cc:	21 96       	adiw	r28, 0x01	; 1
		//output currently indexed character
		outChar(str[index]);
 3ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
		//wait til busy flag isn't set
		pollBusy();
 3d2:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>

void outString(char *str) {
	//counter for index
	int index = 0;
	//until we've reached the end of our string
	while(str[index] != '\0') {
 3d6:	89 91       	ld	r24, Y+
 3d8:	81 11       	cpse	r24, r1
 3da:	f9 cf       	rjmp	.-14     	; 0x3ce <_Z9outStringPc+0xe>
		//wait til busy flag isn't set
		pollBusy();
		//increment index
		index++;
	}
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <_Z11keypad_initv>:

void keypad_init() {
	//first, set upper 4 bits of PORTE as output
	PORTF.DIR = 0x0F;
 3e2:	e0 ea       	ldi	r30, 0xA0	; 160
 3e4:	f6 e0       	ldi	r31, 0x06	; 6
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	80 83       	st	Z, r24
	//then set lower 4 bits to have internal pull-up resistors
	//we will write 0 to the column we are checking and will be
	//checking to see if a row is 0 to determine a key press
	PORTF.PIN4CTRL = 0x18;
 3ea:	88 e1       	ldi	r24, 0x18	; 24
 3ec:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = 0x18;
 3ee:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = 0x18;
 3f0:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = 0x18;
 3f2:	87 8b       	std	Z+23, r24	; 0x17
 3f4:	08 95       	ret

000003f6 <_Z11keypad_scanv>:
}

int keypad_scan() {
 3f6:	6f 92       	push	r6
 3f8:	7f 92       	push	r7
 3fa:	8f 92       	push	r8
 3fc:	9f 92       	push	r9
 3fe:	af 92       	push	r10
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	aa 97       	sbiw	r28, 0x2a	; 42
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	de bf       	out	0x3e, r29	; 62
	//values to write to PORTF_OUT to check each column
	//in order from row1 to row4
	uint16_t rows[] = {0x0E, 0x0D, 0x0B, 0x07};
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	e0 e0       	ldi	r30, 0x00	; 0
 420:	f0 e2       	ldi	r31, 0x20	; 32
 422:	de 01       	movw	r26, r28
 424:	91 96       	adiw	r26, 0x21	; 33
 426:	01 90       	ld	r0, Z+
 428:	0d 92       	st	X+, r0
 42a:	8a 95       	dec	r24
 42c:	e1 f7       	brne	.-8      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	//values to compare PORTE_IN to after writing to PORTF_OUT
	uint16_t col1[] = {0x7E, 0xBE, 0xDE, 0xEE};
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	e8 e0       	ldi	r30, 0x08	; 8
 432:	f0 e2       	ldi	r31, 0x20	; 32
 434:	de 01       	movw	r26, r28
 436:	59 96       	adiw	r26, 0x19	; 25
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
	uint16_t col2[] = {0x7D, 0xBD, 0xDD, 0xED};
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	e0 e1       	ldi	r30, 0x10	; 16
 444:	f0 e2       	ldi	r31, 0x20	; 32
 446:	de 01       	movw	r26, r28
 448:	51 96       	adiw	r26, 0x11	; 17
 44a:	01 90       	ld	r0, Z+
 44c:	0d 92       	st	X+, r0
 44e:	8a 95       	dec	r24
 450:	e1 f7       	brne	.-8      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
	uint16_t col3[] = {0x7B, 0xBB, 0xDB, 0xEB};
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	e8 e1       	ldi	r30, 0x18	; 24
 456:	f0 e2       	ldi	r31, 0x20	; 32
 458:	de 01       	movw	r26, r28
 45a:	19 96       	adiw	r26, 0x09	; 9
 45c:	01 90       	ld	r0, Z+
 45e:	0d 92       	st	X+, r0
 460:	8a 95       	dec	r24
 462:	e1 f7       	brne	.-8      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
	uint16_t col4[] = {0x77, 0xB7, 0xD7, 0xE7};
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	e0 e2       	ldi	r30, 0x20	; 32
 468:	f0 e2       	ldi	r31, 0x20	; 32
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
 476:	19 a6       	std	Y+41, r1	; 0x29
 478:	1a a6       	std	Y+42, r1	; 0x2a
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
 47a:	c9 80       	ldd	r12, Y+1	; 0x01
 47c:	da 80       	ldd	r13, Y+2	; 0x02
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
 47e:	a9 84       	ldd	r10, Y+9	; 0x09
 480:	ba 84       	ldd	r11, Y+10	; 0x0a
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
 482:	89 88       	ldd	r8, Y+17	; 0x11
 484:	9a 88       	ldd	r9, Y+18	; 0x12
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
 486:	69 8c       	ldd	r6, Y+25	; 0x19
 488:	7a 8c       	ldd	r7, Y+26	; 0x1a
 48a:	de 01       	movw	r26, r28
 48c:	91 96       	adiw	r26, 0x21	; 33
 48e:	01 e0       	ldi	r16, 0x01	; 1
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
	
	for(int i = 0; i < 4; i++) {
		//write to output the column that we're currently checking
		PORTF.OUT = rows[i];
 496:	0f 2e       	mov	r0, r31
 498:	f0 ea       	ldi	r31, 0xA0	; 160
 49a:	ef 2e       	mov	r14, r31
 49c:	f6 e0       	ldi	r31, 0x06	; 6
 49e:	ff 2e       	mov	r15, r31
 4a0:	f0 2d       	mov	r31, r0
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	8c 91       	ld	r24, X
 4ae:	12 96       	adiw	r26, 0x02	; 2
 4b0:	f7 01       	movw	r30, r14
 4b2:	84 83       	std	Z+4, r24	; 0x04
		//two nops to give time to get proper input read
		asm volatile ("nop");
 4b4:	00 00       	nop
		asm volatile ("nop");
 4b6:	00 00       	nop
		//read from PORTE_IN
		input = PORTF.IN;
 4b8:	80 85       	ldd	r24, Z+8	; 0x08
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	89 a7       	std	Y+41, r24	; 0x29
 4be:	9a a7       	std	Y+42, r25	; 0x2a
		//if on first column
		if(i == 0){
 4c0:	61 15       	cp	r22, r1
 4c2:	71 05       	cpc	r23, r1
 4c4:	31 f5       	brne	.+76     	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
 4c6:	89 a5       	ldd	r24, Y+41	; 0x29
 4c8:	9a a5       	ldd	r25, Y+42	; 0x2a
 4ca:	68 16       	cp	r6, r24
 4cc:	79 06       	cpc	r7, r25
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4d0:	98 c0       	rjmp	.+304    	; 0x602 <__FUSE_REGION_LENGTH__+0x202>
 4d2:	fe 01       	movw	r30, r28
 4d4:	7b 96       	adiw	r30, 0x1b	; 27
		//read from PORTE_IN
		input = PORTF.IN;
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col1
				if(input == col1[j]) {
 4da:	21 91       	ld	r18, Z+
 4dc:	31 91       	ld	r19, Z+
 4de:	89 a5       	ldd	r24, Y+41	; 0x29
 4e0:	9a a5       	ldd	r25, Y+42	; 0x2a
 4e2:	28 17       	cp	r18, r24
 4e4:	39 07       	cpc	r19, r25
 4e6:	79 f4       	brne	.+30     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
					if(j == 3) {
 4e8:	43 30       	cpi	r20, 0x03	; 3
 4ea:	51 05       	cpc	r21, r1
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__FUSE_REGION_LENGTH__+0xf0>
 4ee:	8c c0       	rjmp	.+280    	; 0x608 <__FUSE_REGION_LENGTH__+0x208>
						return 1; //if 'A'
						} else if(j == 2) {
 4f0:	42 30       	cpi	r20, 0x02	; 2
 4f2:	51 05       	cpc	r21, r1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
 4f6:	8b c0       	rjmp	.+278    	; 0x60e <__FUSE_REGION_LENGTH__+0x20e>
						return 4;
						} else if(j == 1) {
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	51 05       	cpc	r21, r1
 4fc:	09 f4       	brne	.+2      	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 4fe:	8a c0       	rjmp	.+276    	; 0x614 <__FUSE_REGION_LENGTH__+0x214>
						return 7;
						} else {
						return 14;
 500:	8e e0       	ldi	r24, 0x0E	; 14
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	ad c0       	rjmp	.+346    	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
		//read from PORTE_IN
		input = PORTF.IN;
		//if on first column
		if(i == 0){
			//check each row
			for(int j = 0; j < 4; j++) {
 506:	4f 5f       	subi	r20, 0xFF	; 255
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	44 30       	cpi	r20, 0x04	; 4
 50c:	51 05       	cpc	r21, r1
 50e:	29 f7       	brne	.-54     	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
 510:	c9 cf       	rjmp	.-110    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
					}
				}
			}
		}
		//if on second column
		else if(i == 1){
 512:	61 30       	cpi	r22, 0x01	; 1
 514:	71 05       	cpc	r23, r1
 516:	31 f5       	brne	.+76     	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
 518:	89 a5       	ldd	r24, Y+41	; 0x29
 51a:	9a a5       	ldd	r25, Y+42	; 0x2a
 51c:	88 16       	cp	r8, r24
 51e:	99 06       	cpc	r9, r25
 520:	09 f4       	brne	.+2      	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
 522:	7b c0       	rjmp	.+246    	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
 524:	fe 01       	movw	r30, r28
 526:	73 96       	adiw	r30, 0x13	; 19
			}
		}
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col2
				if(input == col2[j]) {
 52c:	21 91       	ld	r18, Z+
 52e:	31 91       	ld	r19, Z+
 530:	89 a5       	ldd	r24, Y+41	; 0x29
 532:	9a a5       	ldd	r25, Y+42	; 0x2a
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	79 f4       	brne	.+30     	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
					if(j == 3) {
 53a:	43 30       	cpi	r20, 0x03	; 3
 53c:	51 05       	cpc	r21, r1
 53e:	09 f4       	brne	.+2      	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
 540:	6f c0       	rjmp	.+222    	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
						return 2;
						} else if (j == 2) {
 542:	42 30       	cpi	r20, 0x02	; 2
 544:	51 05       	cpc	r21, r1
 546:	09 f4       	brne	.+2      	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
 548:	6e c0       	rjmp	.+220    	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
						return 5;
						} else if(j == 1) {
 54a:	41 30       	cpi	r20, 0x01	; 1
 54c:	51 05       	cpc	r21, r1
 54e:	09 f4       	brne	.+2      	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
 550:	6d c0       	rjmp	.+218    	; 0x62c <__FUSE_REGION_LENGTH__+0x22c>
						return 8;
						} else {
						return 0;
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	84 c0       	rjmp	.+264    	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			}
		}
		//if on second column
		else if(i == 1){
			//check each row
			for(int j = 0; j < 4; j++) {
 558:	4f 5f       	subi	r20, 0xFF	; 255
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	44 30       	cpi	r20, 0x04	; 4
 55e:	51 05       	cpc	r21, r1
 560:	29 f7       	brne	.-54     	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
 562:	a0 cf       	rjmp	.-192    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
					}
				}
			}
		}
		//if on third column
		else if(i == 2){
 564:	62 30       	cpi	r22, 0x02	; 2
 566:	71 05       	cpc	r23, r1
 568:	31 f0       	breq	.+12     	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
 56a:	89 a5       	ldd	r24, Y+41	; 0x29
 56c:	9a a5       	ldd	r25, Y+42	; 0x2a
 56e:	c8 16       	cp	r12, r24
 570:	d9 06       	cpc	r13, r25
 572:	39 f5       	brne	.+78     	; 0x5c2 <__FUSE_REGION_LENGTH__+0x1c2>
 574:	5e c0       	rjmp	.+188    	; 0x632 <__FUSE_REGION_LENGTH__+0x232>
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
 576:	89 a5       	ldd	r24, Y+41	; 0x29
 578:	9a a5       	ldd	r25, Y+42	; 0x2a
 57a:	a8 16       	cp	r10, r24
 57c:	b9 06       	cpc	r11, r25
 57e:	09 f4       	brne	.+2      	; 0x582 <__FUSE_REGION_LENGTH__+0x182>
 580:	5b c0       	rjmp	.+182    	; 0x638 <__FUSE_REGION_LENGTH__+0x238>
 582:	fe 01       	movw	r30, r28
 584:	3b 96       	adiw	r30, 0x0b	; 11
			}
		}
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
 586:	41 e0       	ldi	r20, 0x01	; 1
 588:	50 e0       	ldi	r21, 0x00	; 0
				//compare input to our expected vals for col3
				if(input == col3[j]) {
 58a:	21 91       	ld	r18, Z+
 58c:	31 91       	ld	r19, Z+
 58e:	89 a5       	ldd	r24, Y+41	; 0x29
 590:	9a a5       	ldd	r25, Y+42	; 0x2a
 592:	28 17       	cp	r18, r24
 594:	39 07       	cpc	r19, r25
 596:	79 f4       	brne	.+30     	; 0x5b6 <__FUSE_REGION_LENGTH__+0x1b6>
					if(j == 3) {
 598:	43 30       	cpi	r20, 0x03	; 3
 59a:	51 05       	cpc	r21, r1
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
 59e:	4f c0       	rjmp	.+158    	; 0x63e <__FUSE_REGION_LENGTH__+0x23e>
						return 3;
						} else if(j == 2) {
 5a0:	42 30       	cpi	r20, 0x02	; 2
 5a2:	51 05       	cpc	r21, r1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <__FUSE_REGION_LENGTH__+0x1a8>
 5a6:	4e c0       	rjmp	.+156    	; 0x644 <__FUSE_REGION_LENGTH__+0x244>
						return 6;
						} else if(j == 1) {
 5a8:	41 30       	cpi	r20, 0x01	; 1
 5aa:	51 05       	cpc	r21, r1
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <__FUSE_REGION_LENGTH__+0x1b0>
 5ae:	4d c0       	rjmp	.+154    	; 0x64a <__FUSE_REGION_LENGTH__+0x24a>
						return 9;
						} else {
						return 15;
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	55 c0       	rjmp	.+170    	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			}
		}
		//if on third column
		else if(i == 2){
			//check each row
			for(int j = 0; j < 4; j++) {
 5b6:	4f 5f       	subi	r20, 0xFF	; 255
 5b8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ba:	44 30       	cpi	r20, 0x04	; 4
 5bc:	51 05       	cpc	r21, r1
 5be:	29 f7       	brne	.-54     	; 0x58a <__FUSE_REGION_LENGTH__+0x18a>
 5c0:	71 cf       	rjmp	.-286    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 5c2:	fe 01       	movw	r30, r28
 5c4:	33 96       	adiw	r30, 0x03	; 3
			}
		}
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
				//compare input to our expected vals for col4
				if(input == col4[j]) {
 5ca:	41 91       	ld	r20, Z+
 5cc:	51 91       	ld	r21, Z+
 5ce:	29 a5       	ldd	r18, Y+41	; 0x29
 5d0:	3a a5       	ldd	r19, Y+42	; 0x2a
 5d2:	42 17       	cp	r20, r18
 5d4:	53 07       	cpc	r21, r19
 5d6:	51 f4       	brne	.+20     	; 0x5ec <__FUSE_REGION_LENGTH__+0x1ec>
					if(j == 0) {
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	d1 f1       	breq	.+116    	; 0x650 <__FUSE_REGION_LENGTH__+0x250>
						return 13;
						} else if(j == 1) {
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	91 05       	cpc	r25, r1
 5e0:	d1 f1       	breq	.+116    	; 0x656 <__FUSE_REGION_LENGTH__+0x256>
						return 12;
						} else if(j == 2) {
 5e2:	02 97       	sbiw	r24, 0x02	; 2
 5e4:	d9 f1       	breq	.+118    	; 0x65c <__FUSE_REGION_LENGTH__+0x25c>
						return 11;
						} else {
						return 10;
 5e6:	8a e0       	ldi	r24, 0x0A	; 10
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	3a c0       	rjmp	.+116    	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			}
		}
		//if on fourth column
		else {
			//check each row
			for(int j = 0; j < 4; j++) {
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	84 30       	cpi	r24, 0x04	; 4
 5f0:	91 05       	cpc	r25, r1
 5f2:	59 f7       	brne	.-42     	; 0x5ca <__FUSE_REGION_LENGTH__+0x1ca>
	uint16_t col3[] = {0x7B, 0xBB, 0xDB, 0xEB};
	uint16_t col4[] = {0x77, 0xB7, 0xD7, 0xE7};
	//variable to read from PORTF_IN
	uint16_t volatile input = 0x00;
	
	for(int i = 0; i < 4; i++) {
 5f4:	04 30       	cpi	r16, 0x04	; 4
 5f6:	11 05       	cpc	r17, r1
 5f8:	0c f4       	brge	.+2      	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
 5fa:	54 cf       	rjmp	.-344    	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
				}
			}
		}
	} //end for loop (writing to each column)
	//no key pressed, return default value of 16
	return 16;
 5fc:	80 e1       	ldi	r24, 0x10	; 16
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	2f c0       	rjmp	.+94     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 2) {
						return 4;
						} else if(j == 1) {
						return 7;
						} else {
						return 14;
 602:	8e e0       	ldi	r24, 0x0E	; 14
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	2c c0       	rjmp	.+88     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col1
				if(input == col1[j]) {
					if(j == 3) {
						return 1; //if 'A'
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	29 c0       	rjmp	.+82     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 2) {
						return 4;
 60e:	84 e0       	ldi	r24, 0x04	; 4
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	26 c0       	rjmp	.+76     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 1) {
						return 7;
 614:	87 e0       	ldi	r24, 0x07	; 7
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	23 c0       	rjmp	.+70     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if (j == 2) {
						return 5;
						} else if(j == 1) {
						return 8;
						} else {
						return 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	20 c0       	rjmp	.+64     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col2
				if(input == col2[j]) {
					if(j == 3) {
						return 2;
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	1d c0       	rjmp	.+58     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if (j == 2) {
						return 5;
 626:	85 e0       	ldi	r24, 0x05	; 5
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	1a c0       	rjmp	.+52     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 1) {
						return 8;
 62c:	88 e0       	ldi	r24, 0x08	; 8
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	17 c0       	rjmp	.+46     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
					if(j == 0) {
						return 13;
 632:	8d e0       	ldi	r24, 0x0D	; 13
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	14 c0       	rjmp	.+40     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 2) {
						return 6;
						} else if(j == 1) {
						return 9;
						} else {
						return 15;
 638:	8f e0       	ldi	r24, 0x0F	; 15
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	11 c0       	rjmp	.+34     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col3
				if(input == col3[j]) {
					if(j == 3) {
						return 3;
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e c0       	rjmp	.+28     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 2) {
						return 6;
 644:	86 e0       	ldi	r24, 0x06	; 6
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0b c0       	rjmp	.+22     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 1) {
						return 9;
 64a:	89 e0       	ldi	r24, 0x09	; 9
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	08 c0       	rjmp	.+16     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
			//check each row
			for(int j = 0; j < 4; j++) {
				//compare input to our expected vals for col4
				if(input == col4[j]) {
					if(j == 0) {
						return 13;
 650:	8d e0       	ldi	r24, 0x0D	; 13
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	05 c0       	rjmp	.+10     	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 1) {
						return 12;
 656:	8c e0       	ldi	r24, 0x0C	; 12
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
						} else if(j == 2) {
						return 11;
 65c:	8b e0       	ldi	r24, 0x0B	; 11
 65e:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	} //end for loop (writing to each column)
	//no key pressed, return default value of 16
	return 16;
} //end keypad_scan
 660:	aa 96       	adiw	r28, 0x2a	; 42
 662:	cd bf       	out	0x3d, r28	; 61
 664:	de bf       	out	0x3e, r29	; 62
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	ff 90       	pop	r15
 670:	ef 90       	pop	r14
 672:	df 90       	pop	r13
 674:	cf 90       	pop	r12
 676:	bf 90       	pop	r11
 678:	af 90       	pop	r10
 67a:	9f 90       	pop	r9
 67c:	8f 90       	pop	r8
 67e:	7f 90       	pop	r7
 680:	6f 90       	pop	r6
 682:	08 95       	ret

00000684 <_Z7LCD_CDSi>:
	}
	
	return 0;
}

void LCD_CDS(int key) {
 684:	6f 92       	push	r6
 686:	7f 92       	push	r7
 688:	8f 92       	push	r8
 68a:	9f 92       	push	r9
 68c:	af 92       	push	r10
 68e:	bf 92       	push	r11
 690:	cf 92       	push	r12
 692:	df 92       	push	r13
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	8c 01       	movw	r16, r24
	
	int keystart = key; 
	float voltCDS = 0; 
		
	//Normal Further LCD Initialization - LCD_Notes_8-bit.pdf
	__far_mem_write(LCD_Command, 0x38);	//two lines
 6a2:	28 e3       	ldi	r18, 0x38	; 56
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e5       	ldi	r25, 0x50	; 80
 6a8:	a9 e3       	ldi	r26, 0x39	; 57
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	0b b6       	in	r0, 0x3b	; 59
 6ae:	ab bf       	out	0x3b, r26	; 59
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 83       	st	Z, r18
 6b4:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 6b6:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	__far_mem_write(LCD_Command, 0x0F); //display on; cursor on; blink on
 6ba:	2f e0       	ldi	r18, 0x0F	; 15
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e5       	ldi	r25, 0x50	; 80
 6c0:	a9 e3       	ldi	r26, 0x39	; 57
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	0b b6       	in	r0, 0x3b	; 59
 6c6:	ab bf       	out	0x3b, r26	; 59
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18
 6cc:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 6ce:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	90 e5       	ldi	r25, 0x50	; 80
 6d8:	a9 e3       	ldi	r26, 0x39	; 57
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	0b b6       	in	r0, 0x3b	; 59
 6de:	ab bf       	out	0x3b, r26	; 59
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 83       	st	Z, r18
 6e4:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 6e6:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		
	//continuously read the voltage
	while(key == keystart || key == 16) {
		pollBusy();
		//clear LCD and wait for busy flag to clear
		__far_mem_write(LCD_Command, 0x01);
 6ea:	0f 2e       	mov	r0, r31
 6ec:	81 2c       	mov	r8, r1
 6ee:	f0 e5       	ldi	r31, 0x50	; 80
 6f0:	9f 2e       	mov	r9, r31
 6f2:	f9 e3       	ldi	r31, 0x39	; 57
 6f4:	af 2e       	mov	r10, r31
 6f6:	b1 2c       	mov	r11, r1
 6f8:	f0 2d       	mov	r31, r0
 6fa:	77 24       	eor	r7, r7
 6fc:	73 94       	inc	r7
		pollBusy();
		
		voltCDS = toDec((float)ADCB.CH1.RES);
 6fe:	c0 e4       	ldi	r28, 0x40	; 64
 700:	d2 e0       	ldi	r29, 0x02	; 2
		
		if(voltCDS <= 1) {
			__far_mem_write(CS0_Start, 0x01);
 702:	0f 2e       	mov	r0, r31
 704:	c1 2c       	mov	r12, r1
 706:	f0 e8       	ldi	r31, 0x80	; 128
 708:	df 2e       	mov	r13, r31
 70a:	f8 e2       	ldi	r31, 0x28	; 40
 70c:	ef 2e       	mov	r14, r31
 70e:	f1 2c       	mov	r15, r1
 710:	f0 2d       	mov	r31, r0
		} else {
			__far_mem_write(CS0_Start, 0x00);
 712:	61 2c       	mov	r6, r1
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
	pollBusy();
		
	//continuously read the voltage
	while(key == keystart || key == 16) {
		pollBusy();
 714:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		//clear LCD and wait for busy flag to clear
		__far_mem_write(LCD_Command, 0x01);
 718:	0b b6       	in	r0, 0x3b	; 59
 71a:	ab be       	out	0x3b, r10	; 59
 71c:	f4 01       	movw	r30, r8
 71e:	70 82       	st	Z, r7
 720:	0b be       	out	0x3b, r0	; 59
		pollBusy();
 722:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		
		voltCDS = toDec((float)ADCB.CH1.RES);
 726:	6c a5       	ldd	r22, Y+44	; 0x2c
 728:	7d a5       	ldd	r23, Y+45	; 0x2d
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
	}
	return n;
}

float toDec(float f) {
	return ((f / 128.0) * 5);
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	5c e3       	ldi	r21, 0x3C	; 60
 73a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	40 ea       	ldi	r20, 0xA0	; 160
 744:	50 e4       	ldi	r21, 0x40	; 64
 746:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
		__far_mem_write(LCD_Command, 0x01);
		pollBusy();
		
		voltCDS = toDec((float)ADCB.CH1.RES);
		
		if(voltCDS <= 1) {
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	40 e8       	ldi	r20, 0x80	; 128
 750:	5f e3       	ldi	r21, 0x3F	; 63
 752:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__cmpsf2>
 756:	18 16       	cp	r1, r24
 758:	34 f0       	brlt	.+12     	; 0x766 <_Z7LCD_CDSi+0xe2>
			__far_mem_write(CS0_Start, 0x01);
 75a:	0b b6       	in	r0, 0x3b	; 59
 75c:	eb be       	out	0x3b, r14	; 59
 75e:	f6 01       	movw	r30, r12
 760:	70 82       	st	Z, r7
 762:	0b be       	out	0x3b, r0	; 59
 764:	05 c0       	rjmp	.+10     	; 0x770 <_Z7LCD_CDSi+0xec>
		} else {
			__far_mem_write(CS0_Start, 0x00);
 766:	0b b6       	in	r0, 0x3b	; 59
 768:	eb be       	out	0x3b, r14	; 59
 76a:	f6 01       	movw	r30, r12
 76c:	60 82       	st	Z, r6
 76e:	0b be       	out	0x3b, r0	; 59
		}
			
		pollBusy();
 770:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		RoughDelay1sec();	//give LED some time to chill
 774:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z14RoughDelay1secv>
		key = keypad_scan(); 
 778:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z11keypad_scanv>
	pollBusy();
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
	pollBusy();
		
	//continuously read the voltage
	while(key == keystart || key == 16) {
 77c:	08 17       	cp	r16, r24
 77e:	19 07       	cpc	r17, r25
 780:	09 f4       	brne	.+2      	; 0x784 <_Z7LCD_CDSi+0x100>
 782:	c8 cf       	rjmp	.-112    	; 0x714 <_Z7LCD_CDSi+0x90>
 784:	40 97       	sbiw	r24, 0x10	; 16
 786:	09 f4       	brne	.+2      	; 0x78a <_Z7LCD_CDSi+0x106>
 788:	c5 cf       	rjmp	.-118    	; 0x714 <_Z7LCD_CDSi+0x90>
			
		pollBusy();
		RoughDelay1sec();	//give LED some time to chill
		key = keypad_scan(); 
	}
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	df 90       	pop	r13
 798:	cf 90       	pop	r12
 79a:	bf 90       	pop	r11
 79c:	af 90       	pop	r10
 79e:	9f 90       	pop	r9
 7a0:	8f 90       	pop	r8
 7a2:	7f 90       	pop	r7
 7a4:	6f 90       	pop	r6
 7a6:	08 95       	ret

000007a8 <_Z6LCD_VMi>:
		pollBusy();
	}
	RoughDelay1sec(); 
}

void LCD_VM(int key) {
 7a8:	2f 92       	push	r2
 7aa:	3f 92       	push	r3
 7ac:	4f 92       	push	r4
 7ae:	5f 92       	push	r5
 7b0:	6f 92       	push	r6
 7b2:	7f 92       	push	r7
 7b4:	8f 92       	push	r8
 7b6:	9f 92       	push	r9
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	2e 97       	sbiw	r28, 0x0e	; 14
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	8d 87       	std	Y+13, r24	; 0x0d
 7d8:	9e 87       	std	Y+14, r25	; 0x0e
	int keystart = key;
	
	//variables for reading voltage and converting to Hex
	int nibble1 = 0;
	int nibble2 = 0;
	char label[] = "V (0x\0";
 7da:	87 e0       	ldi	r24, 0x07	; 7
 7dc:	e8 e2       	ldi	r30, 0x28	; 40
 7de:	f0 e2       	ldi	r31, 0x20	; 32
 7e0:	de 01       	movw	r26, r28
 7e2:	11 96       	adiw	r26, 0x01	; 1
 7e4:	01 90       	ld	r0, Z+
 7e6:	0d 92       	st	X+, r0
 7e8:	8a 95       	dec	r24
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <_Z6LCD_VMi+0x3c>
	int hundreds = 0;
	//continuously read the voltage and display to the LED
	while(key == keystart || key == 16) {
		pollBusy();
		//clear LCD, cursor home, and wait for busy flag to clear
		__far_mem_write(LCD_Command, 0x01);
 7ec:	0f 2e       	mov	r0, r31
 7ee:	41 2c       	mov	r4, r1
 7f0:	f0 e5       	ldi	r31, 0x50	; 80
 7f2:	5f 2e       	mov	r5, r31
 7f4:	f9 e3       	ldi	r31, 0x39	; 57
 7f6:	6f 2e       	mov	r6, r31
 7f8:	71 2c       	mov	r7, r1
 7fa:	f0 2d       	mov	r31, r0
 7fc:	11 e0       	ldi	r17, 0x01	; 1
		pollBusy();
			
		//convert digital to hex to ascii values for each nibble
		nibble1 = toAscii(ADCB.CH0.RES / 16);	//lower nibble
 7fe:	68 94       	set
 800:	22 24       	eor	r2, r2
 802:	26 f8       	bld	r2, 6
 804:	33 24       	eor	r3, r3
 806:	31 f8       	bld	r3, 1
	int tens = 0;
	float hundredsF = 0;
	int hundreds = 0;
	//continuously read the voltage and display to the LED
	while(key == keystart || key == 16) {
		pollBusy();
 808:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		//clear LCD, cursor home, and wait for busy flag to clear
		__far_mem_write(LCD_Command, 0x01);
 80c:	0b b6       	in	r0, 0x3b	; 59
 80e:	6b be       	out	0x3b, r6	; 59
 810:	f2 01       	movw	r30, r4
 812:	10 83       	st	Z, r17
 814:	0b be       	out	0x3b, r0	; 59
		pollBusy();
 816:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			
		//convert digital to hex to ascii values for each nibble
		nibble1 = toAscii(ADCB.CH0.RES / 16);	//lower nibble
 81a:	f1 01       	movw	r30, r2
 81c:	84 a1       	ldd	r24, Z+36	; 0x24
 81e:	95 a1       	ldd	r25, Z+37	; 0x25
 820:	92 95       	swap	r25
 822:	82 95       	swap	r24
 824:	8f 70       	andi	r24, 0x0F	; 15
 826:	89 27       	eor	r24, r25
 828:	9f 70       	andi	r25, 0x0F	; 15
 82a:	89 27       	eor	r24, r25
 82c:	0e 94 83 01 	call	0x306	; 0x306 <_Z7toAsciii>
 830:	08 2f       	mov	r16, r24
		nibble2 = toAscii(ADCB.CH0.RES % 16);	//upper nibble
 832:	f1 01       	movw	r30, r2
 834:	84 a1       	ldd	r24, Z+36	; 0x24
 836:	95 a1       	ldd	r25, Z+37	; 0x25
 838:	8f 70       	andi	r24, 0x0F	; 15
 83a:	99 27       	eor	r25, r25
 83c:	0e 94 83 01 	call	0x306	; 0x306 <_Z7toAsciii>
 840:	8c 87       	std	Y+12, r24	; 0x0c
		//for 5V at pot this should produce 0x7F
		//for 2.5V at pot this should produce 0x40
			
		//compute decimal values using formula given in Part D section 5
		volt = toDec((float)ADCB.CH0.RES);
 842:	f1 01       	movw	r30, r2
 844:	64 a1       	ldd	r22, Z+36	; 0x24
 846:	75 a1       	ldd	r23, Z+37	; 0x25
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
	}
	return n;
}

float toDec(float f) {
	return ((f / 128.0) * 5);
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	5c e3       	ldi	r21, 0x3C	; 60
 858:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	40 ea       	ldi	r20, 0xA0	; 160
 862:	50 e4       	ldi	r21, 0x40	; 64
 864:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 868:	6b 01       	movw	r12, r22
 86a:	7c 01       	movw	r14, r24
		//for 5V at pot this should produce 0x7F
		//for 2.5V at pot this should produce 0x40
			
		//compute decimal values using formula given in Part D section 5
		volt = toDec((float)ADCB.CH0.RES);
		ones = (int)volt;
 86c:	0e 94 33 06 	call	0xc66	; 0xc66 <__fixsfsi>
 870:	4b 01       	movw	r8, r22
 872:	5c 01       	movw	r10, r24
float toDec(float f) {
	return ((f / 128.0) * 5);
}

float diffTen(float volt, int sub) {
	return ((volt - sub) * 10);
 874:	07 2e       	mov	r0, r23
 876:	00 0c       	add	r0, r0
 878:	88 0b       	sbc	r24, r24
 87a:	99 0b       	sbc	r25, r25
 87c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__floatsisf>
 880:	9b 01       	movw	r18, r22
 882:	ac 01       	movw	r20, r24
 884:	c7 01       	movw	r24, r14
 886:	b6 01       	movw	r22, r12
 888:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	40 e2       	ldi	r20, 0x20	; 32
 892:	51 e4       	ldi	r21, 0x41	; 65
 894:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 898:	68 87       	std	Y+8, r22	; 0x08
 89a:	79 87       	std	Y+9, r23	; 0x09
 89c:	8a 87       	std	Y+10, r24	; 0x0a
 89e:	9b 87       	std	Y+11, r25	; 0x0b
			
		//compute decimal values using formula given in Part D section 5
		volt = toDec((float)ADCB.CH0.RES);
		ones = (int)volt;
		tensF = diffTen(volt, ones);
		tens = (int)tensF;
 8a0:	0e 94 33 06 	call	0xc66	; 0xc66 <__fixsfsi>
 8a4:	6b 01       	movw	r12, r22
 8a6:	7c 01       	movw	r14, r24
float toDec(float f) {
	return ((f / 128.0) * 5);
}

float diffTen(float volt, int sub) {
	return ((volt - sub) * 10);
 8a8:	07 2e       	mov	r0, r23
 8aa:	00 0c       	add	r0, r0
 8ac:	88 0b       	sbc	r24, r24
 8ae:	99 0b       	sbc	r25, r25
 8b0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__floatsisf>
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	68 85       	ldd	r22, Y+8	; 0x08
 8ba:	79 85       	ldd	r23, Y+9	; 0x09
 8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 8be:	9b 85       	ldd	r25, Y+11	; 0x0b
 8c0:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
 8c4:	20 e0       	ldi	r18, 0x00	; 0
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	40 e2       	ldi	r20, 0x20	; 32
 8ca:	51 e4       	ldi	r21, 0x41	; 65
 8cc:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
		volt = toDec((float)ADCB.CH0.RES);
		ones = (int)volt;
		tensF = diffTen(volt, ones);
		tens = (int)tensF;
		hundredsF = diffTen(tensF, tens);
		hundreds = (int)hundredsF;
 8d0:	0e 94 33 06 	call	0xc66	; 0xc66 <__fixsfsi>
 8d4:	68 87       	std	Y+8, r22	; 0x08
 8d6:	79 87       	std	Y+9, r23	; 0x09
 8d8:	8a 87       	std	Y+10, r24	; 0x0a
 8da:	9b 87       	std	Y+11, r25	; 0x0b
			
		//generate correct ascii from this
		ones = toAscii(ones);
 8dc:	c4 01       	movw	r24, r8
 8de:	0e 94 83 01 	call	0x306	; 0x306 <_Z7toAsciii>
 8e2:	b8 2e       	mov	r11, r24
		tens = toAscii(tens);
 8e4:	c6 01       	movw	r24, r12
 8e6:	0e 94 83 01 	call	0x306	; 0x306 <_Z7toAsciii>
 8ea:	f8 2e       	mov	r15, r24
		hundreds = toAscii(hundreds);
 8ec:	88 85       	ldd	r24, Y+8	; 0x08
 8ee:	99 85       	ldd	r25, Y+9	; 0x09
 8f0:	0e 94 83 01 	call	0x306	; 0x306 <_Z7toAsciii>
 8f4:	e8 2e       	mov	r14, r24
			
		pollBusy();
 8f6:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(ones);
 8fa:	8b 2d       	mov	r24, r11
 8fc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 900:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar('.');
 904:	8e e2       	ldi	r24, 0x2E	; 46
 906:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 90a:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(tens);
 90e:	8f 2d       	mov	r24, r15
 910:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 914:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(hundreds);
 918:	8e 2d       	mov	r24, r14
 91a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 91e:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outString(label);	//print label before you print the voltage
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			
		pollBusy();
 92a:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(nibble1);
 92e:	80 2f       	mov	r24, r16
 930:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 934:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(nibble2);
 938:	8c 85       	ldd	r24, Y+12	; 0x0c
 93a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		pollBusy();
 93e:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		outChar(')');
 942:	89 e2       	ldi	r24, 0x29	; 41
 944:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z7outCharc>
			
		RoughDelay1sec();	//give LED some time to chill
 948:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z14RoughDelay1secv>
		pollBusy(); //wait for busy flag to clear
 94c:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
		
		key = keypad_scan(); 
 950:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z11keypad_scanv>
	float tensF = 0;
	int tens = 0;
	float hundredsF = 0;
	int hundreds = 0;
	//continuously read the voltage and display to the LED
	while(key == keystart || key == 16) {
 954:	2d 85       	ldd	r18, Y+13	; 0x0d
 956:	3e 85       	ldd	r19, Y+14	; 0x0e
 958:	28 17       	cp	r18, r24
 95a:	39 07       	cpc	r19, r25
 95c:	09 f4       	brne	.+2      	; 0x960 <_Z6LCD_VMi+0x1b8>
 95e:	54 cf       	rjmp	.-344    	; 0x808 <_Z6LCD_VMi+0x60>
 960:	40 97       	sbiw	r24, 0x10	; 16
 962:	09 f4       	brne	.+2      	; 0x966 <_Z6LCD_VMi+0x1be>
 964:	51 cf       	rjmp	.-350    	; 0x808 <_Z6LCD_VMi+0x60>
		RoughDelay1sec();	//give LED some time to chill
		pollBusy(); //wait for busy flag to clear
		
		key = keypad_scan(); 
	}
}
 966:	2e 96       	adiw	r28, 0x0e	; 14
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	9f 90       	pop	r9
 982:	8f 90       	pop	r8
 984:	7f 90       	pop	r7
 986:	6f 90       	pop	r6
 988:	5f 90       	pop	r5
 98a:	4f 90       	pop	r4
 98c:	3f 90       	pop	r3
 98e:	2f 90       	pop	r2
 990:	08 95       	ret

00000992 <main>:
int toAscii(int n);
float toDec(float f);
float diffTen(float volt, int sub);

int main(void)
{
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	cd b7       	in	r28, 0x3d	; 61
 998:	de b7       	in	r29, 0x3e	; 62
 99a:	c9 54       	subi	r28, 0x49	; 73
 99c:	d1 09       	sbc	r29, r1
 99e:	cd bf       	out	0x3d, r28	; 61
 9a0:	de bf       	out	0x3e, r29	; 62
	//perform function based on key pressed
	int keypressed = 0; 
	int flip = 0; 
	char name[] = "Mitch Irvin\0";
 9a2:	8d e0       	ldi	r24, 0x0D	; 13
 9a4:	ef e2       	ldi	r30, 0x2F	; 47
 9a6:	f0 e2       	ldi	r31, 0x20	; 32
 9a8:	de 01       	movw	r26, r28
 9aa:	dd 96       	adiw	r26, 0x3d	; 61
 9ac:	01 90       	ld	r0, Z+
 9ae:	0d 92       	st	X+, r0
 9b0:	8a 95       	dec	r24
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x1a>
	char space[] = "May the Schwartz\0";
 9b4:	82 e1       	ldi	r24, 0x12	; 18
 9b6:	ec e3       	ldi	r30, 0x3C	; 60
 9b8:	f0 e2       	ldi	r31, 0x20	; 32
 9ba:	de 01       	movw	r26, r28
 9bc:	11 96       	adiw	r26, 0x01	; 1
 9be:	01 90       	ld	r0, Z+
 9c0:	0d 92       	st	X+, r0
 9c2:	8a 95       	dec	r24
 9c4:	e1 f7       	brne	.-8      	; 0x9be <main+0x2c>
	char balls[] = "be with you!\0";
 9c6:	8e e0       	ldi	r24, 0x0E	; 14
 9c8:	ee e4       	ldi	r30, 0x4E	; 78
 9ca:	f0 e2       	ldi	r31, 0x20	; 32
 9cc:	de 01       	movw	r26, r28
 9ce:	92 96       	adiw	r26, 0x22	; 34
 9d0:	01 90       	ld	r0, Z+
 9d2:	0d 92       	st	X+, r0
 9d4:	8a 95       	dec	r24
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <main+0x3e>
	char others1[] = "Grassssss... \0";
 9d8:	8f e0       	ldi	r24, 0x0F	; 15
 9da:	ec e5       	ldi	r30, 0x5C	; 92
 9dc:	f0 e2       	ldi	r31, 0x20	; 32
 9de:	de 01       	movw	r26, r28
 9e0:	53 96       	adiw	r26, 0x13	; 19
 9e2:	01 90       	ld	r0, Z+
 9e4:	0d 92       	st	X+, r0
 9e6:	8a 95       	dec	r24
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <main+0x50>
	char others2[] = "tastes bad!\0";
 9ea:	8d e0       	ldi	r24, 0x0D	; 13
 9ec:	eb e6       	ldi	r30, 0x6B	; 107
 9ee:	f0 e2       	ldi	r31, 0x20	; 32
 9f0:	de 01       	movw	r26, r28
 9f2:	d0 96       	adiw	r26, 0x30	; 48
 9f4:	01 90       	ld	r0, Z+
 9f6:	0d 92       	st	X+, r0
 9f8:	8a 95       	dec	r24
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <main+0x62>
	
	keypad_init();
 9fc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z11keypad_initv>
	EBI_init();		//initialize EBI
 a00:	0e 94 4b 01 	call	0x296	; 0x296 <_Z8EBI_initv>
	//ADC_init_CH1();	//initialize CH1 for CdS cell
	
	//Normal Further LCD Initialization - LCD_Notes_8-bit.pdf
	__far_mem_write(LCD_Command, 0x38);	//two lines
 a04:	28 e3       	ldi	r18, 0x38	; 56
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	90 e5       	ldi	r25, 0x50	; 80
 a0a:	a9 e3       	ldi	r26, 0x39	; 57
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	0b b6       	in	r0, 0x3b	; 59
 a10:	ab bf       	out	0x3b, r26	; 59
 a12:	fc 01       	movw	r30, r24
 a14:	20 83       	st	Z, r18
 a16:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 a18:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	__far_mem_write(LCD_Command, 0x0F); //display on; cursor on; blink on
 a1c:	2f e0       	ldi	r18, 0x0F	; 15
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	90 e5       	ldi	r25, 0x50	; 80
 a22:	a9 e3       	ldi	r26, 0x39	; 57
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	0b b6       	in	r0, 0x3b	; 59
 a28:	ab bf       	out	0x3b, r26	; 59
 a2a:	fc 01       	movw	r30, r24
 a2c:	20 83       	st	Z, r18
 a2e:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 a30:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
 a34:	21 e0       	ldi	r18, 0x01	; 1
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	90 e5       	ldi	r25, 0x50	; 80
 a3a:	a9 e3       	ldi	r26, 0x39	; 57
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	0b b6       	in	r0, 0x3b	; 59
 a40:	ab bf       	out	0x3b, r26	; 59
 a42:	fc 01       	movw	r30, r24
 a44:	20 83       	st	Z, r18
 a46:	0b be       	out	0x3b, r0	; 59
	pollBusy();
 a48:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>

int main(void)
{
	//perform function based on key pressed
	int keypressed = 0; 
	int flip = 0; 
 a4c:	e1 2c       	mov	r14, r1
 a4e:	f1 2c       	mov	r15, r1
			continue;
		} else {
			ADC_init();
			pollBusy();
			//clear LCD, cursor home, and wait for busy flag to clear
			__far_mem_write(LCD_Command, 0x01);
 a50:	0f 2e       	mov	r0, r31
 a52:	81 2c       	mov	r8, r1
 a54:	f0 e5       	ldi	r31, 0x50	; 80
 a56:	9f 2e       	mov	r9, r31
 a58:	f9 e3       	ldi	r31, 0x39	; 57
 a5a:	af 2e       	mov	r10, r31
 a5c:	b1 2c       	mov	r11, r1
 a5e:	f0 2d       	mov	r31, r0
 a60:	dd 24       	eor	r13, r13
 a62:	d3 94       	inc	r13
			pollBusy();
			outString(others1);
			pollBusy();
			__far_mem_write(LCD_Command, 0xC0); //next line
 a64:	0f 2e       	mov	r0, r31
 a66:	f0 ec       	ldi	r31, 0xC0	; 192
 a68:	cf 2e       	mov	r12, r31
 a6a:	f0 2d       	mov	r31, r0
	pollBusy();
	__far_mem_write(LCD_Command, 0x01);	//clear screen; cursor home
	pollBusy();
	
	while(1) {
		keypressed = keypad_scan();
 a6c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z11keypad_scanv>
 a70:	8c 01       	movw	r16, r24
		if(keypressed == 0 || keypressed == 1) {
 a72:	82 30       	cpi	r24, 0x02	; 2
 a74:	91 05       	cpc	r25, r1
 a76:	40 f4       	brcc	.+16     	; 0xa88 <main+0xf6>
			ADC_init();		//initialize ADCB CH0
 a78:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z8ADC_initv>
			toggle_LCD(flip); 
 a7c:	c7 01       	movw	r24, r14
 a7e:	0e 94 af 01 	call	0x35e	; 0x35e <_Z10toggle_LCDi>
			flip = ~flip; 
 a82:	e0 94       	com	r14
 a84:	f0 94       	com	r15
 a86:	f2 cf       	rjmp	.-28     	; 0xa6c <main+0xda>
		} else if(keypressed == 2 || keypressed == 3) {
 a88:	9c 01       	movw	r18, r24
 a8a:	22 50       	subi	r18, 0x02	; 2
 a8c:	31 09       	sbc	r19, r1
 a8e:	22 30       	cpi	r18, 0x02	; 2
 a90:	31 05       	cpc	r19, r1
 a92:	30 f4       	brcc	.+12     	; 0xaa0 <main+0x10e>
			ADC_init();		//initialize ADCB CH0
 a94:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z8ADC_initv>
			LCD_VM(keypressed);
 a98:	c8 01       	movw	r24, r16
 a9a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_Z6LCD_VMi>
 a9e:	e6 cf       	rjmp	.-52     	; 0xa6c <main+0xda>
		} else if(keypressed == 4 || keypressed == 5) {
 aa0:	9c 01       	movw	r18, r24
 aa2:	24 50       	subi	r18, 0x04	; 4
 aa4:	31 09       	sbc	r19, r1
 aa6:	22 30       	cpi	r18, 0x02	; 2
 aa8:	31 05       	cpc	r19, r1
 aaa:	c0 f4       	brcc	.+48     	; 0xadc <main+0x14a>
			ADC_init();
 aac:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z8ADC_initv>
			pollBusy();
 ab0:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			//clear LCD, cursor home, and wait for busy flag to clear
			__far_mem_write(LCD_Command, 0x01);
 ab4:	0b b6       	in	r0, 0x3b	; 59
 ab6:	ab be       	out	0x3b, r10	; 59
 ab8:	f4 01       	movw	r30, r8
 aba:	d0 82       	st	Z, r13
 abc:	0b be       	out	0x3b, r0	; 59
			pollBusy();
 abe:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			pollBusy();
 ac2:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			outString(name);
 ac6:	ce 01       	movw	r24, r28
 ac8:	cd 96       	adiw	r24, 0x3d	; 61
 aca:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			pollBusy();
 ace:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			RoughDelay1sec();
 ad2:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z14RoughDelay1secv>
			RoughDelay1sec();
 ad6:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z14RoughDelay1secv>
 ada:	c8 cf       	rjmp	.-112    	; 0xa6c <main+0xda>
		} else if(keypressed == 6 || keypressed == 7) {
 adc:	06 97       	sbiw	r24, 0x06	; 6
 ade:	02 97       	sbiw	r24, 0x02	; 2
 ae0:	f8 f4       	brcc	.+62     	; 0xb20 <main+0x18e>
			ADC_init();
 ae2:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z8ADC_initv>
			pollBusy();
 ae6:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			//clear LCD, cursor home, and wait for busy flag to clear
			__far_mem_write(LCD_Command, 0x01);
 aea:	0b b6       	in	r0, 0x3b	; 59
 aec:	ab be       	out	0x3b, r10	; 59
 aee:	f4 01       	movw	r30, r8
 af0:	d0 82       	st	Z, r13
 af2:	0b be       	out	0x3b, r0	; 59
			pollBusy();
 af4:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			outString(space);
 af8:	ce 01       	movw	r24, r28
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			pollBusy();
 b00:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			__far_mem_write(LCD_Command, 0xC0); //next line
 b04:	0b b6       	in	r0, 0x3b	; 59
 b06:	ab be       	out	0x3b, r10	; 59
 b08:	f4 01       	movw	r30, r8
 b0a:	c0 82       	st	Z, r12
 b0c:	0b be       	out	0x3b, r0	; 59
			pollBusy();
 b0e:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			outString(balls);
 b12:	ce 01       	movw	r24, r28
 b14:	82 96       	adiw	r24, 0x22	; 34
 b16:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			pollBusy();
 b1a:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
 b1e:	a6 cf       	rjmp	.-180    	; 0xa6c <main+0xda>
		} else if(keypressed == 14 || keypressed == 15) {
 b20:	c8 01       	movw	r24, r16
 b22:	0e 97       	sbiw	r24, 0x0e	; 14
 b24:	02 97       	sbiw	r24, 0x02	; 2
 b26:	50 f4       	brcc	.+20     	; 0xb3c <main+0x1aa>
			ADC_init_CH1();
 b28:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z12ADC_init_CH1v>
			pollBusy();
 b2c:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			LCD_CDS(keypressed);
 b30:	c8 01       	movw	r24, r16
 b32:	0e 94 42 03 	call	0x684	; 0x684 <_Z7LCD_CDSi>
			pollBusy();
 b36:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
 b3a:	98 cf       	rjmp	.-208    	; 0xa6c <main+0xda>
		} else if(keypressed == 16) {
 b3c:	00 31       	cpi	r16, 0x10	; 16
 b3e:	11 05       	cpc	r17, r1
 b40:	09 f4       	brne	.+2      	; 0xb44 <main+0x1b2>
 b42:	94 cf       	rjmp	.-216    	; 0xa6c <main+0xda>
			continue;
		} else {
			ADC_init();
 b44:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z8ADC_initv>
			pollBusy();
 b48:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			//clear LCD, cursor home, and wait for busy flag to clear
			__far_mem_write(LCD_Command, 0x01);
 b4c:	0b b6       	in	r0, 0x3b	; 59
 b4e:	ab be       	out	0x3b, r10	; 59
 b50:	f4 01       	movw	r30, r8
 b52:	d0 82       	st	Z, r13
 b54:	0b be       	out	0x3b, r0	; 59
			pollBusy();
 b56:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			outString(others1);
 b5a:	ce 01       	movw	r24, r28
 b5c:	43 96       	adiw	r24, 0x13	; 19
 b5e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			pollBusy();
 b62:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			__far_mem_write(LCD_Command, 0xC0); //next line
 b66:	0b b6       	in	r0, 0x3b	; 59
 b68:	ab be       	out	0x3b, r10	; 59
 b6a:	f4 01       	movw	r30, r8
 b6c:	c0 82       	st	Z, r12
 b6e:	0b be       	out	0x3b, r0	; 59
			pollBusy();
 b70:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
			outString(others2);
 b74:	ce 01       	movw	r24, r28
 b76:	c0 96       	adiw	r24, 0x30	; 48
 b78:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z9outStringPc>
			pollBusy();
 b7c:	0e 94 8a 01 	call	0x314	; 0x314 <_Z8pollBusyv>
 b80:	75 cf       	rjmp	.-278    	; 0xa6c <main+0xda>

00000b82 <__subsf3>:
 b82:	50 58       	subi	r21, 0x80	; 128

00000b84 <__addsf3>:
 b84:	bb 27       	eor	r27, r27
 b86:	aa 27       	eor	r26, r26
 b88:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__addsf3x>
 b8c:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 b90:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 b94:	38 f0       	brcs	.+14     	; 0xba4 <__addsf3+0x20>
 b96:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__addsf3+0x20>
 b9c:	39 f4       	brne	.+14     	; 0xbac <__addsf3+0x28>
 b9e:	9f 3f       	cpi	r25, 0xFF	; 255
 ba0:	19 f4       	brne	.+6      	; 0xba8 <__addsf3+0x24>
 ba2:	26 f4       	brtc	.+8      	; 0xbac <__addsf3+0x28>
 ba4:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3+0x28>
 baa:	e0 95       	com	r30
 bac:	e7 fb       	bst	r30, 7
 bae:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>

00000bb2 <__addsf3x>:
 bb2:	e9 2f       	mov	r30, r25
 bb4:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 bb8:	58 f3       	brcs	.-42     	; 0xb90 <__addsf3+0xc>
 bba:	ba 17       	cp	r27, r26
 bbc:	62 07       	cpc	r22, r18
 bbe:	73 07       	cpc	r23, r19
 bc0:	84 07       	cpc	r24, r20
 bc2:	95 07       	cpc	r25, r21
 bc4:	20 f0       	brcs	.+8      	; 0xbce <__addsf3x+0x1c>
 bc6:	79 f4       	brne	.+30     	; 0xbe6 <__addsf3x+0x34>
 bc8:	a6 f5       	brtc	.+104    	; 0xc32 <__addsf3x+0x80>
 bca:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 bce:	0e f4       	brtc	.+2      	; 0xbd2 <__addsf3x+0x20>
 bd0:	e0 95       	com	r30
 bd2:	0b 2e       	mov	r0, r27
 bd4:	ba 2f       	mov	r27, r26
 bd6:	a0 2d       	mov	r26, r0
 bd8:	0b 01       	movw	r0, r22
 bda:	b9 01       	movw	r22, r18
 bdc:	90 01       	movw	r18, r0
 bde:	0c 01       	movw	r0, r24
 be0:	ca 01       	movw	r24, r20
 be2:	a0 01       	movw	r20, r0
 be4:	11 24       	eor	r1, r1
 be6:	ff 27       	eor	r31, r31
 be8:	59 1b       	sub	r21, r25
 bea:	99 f0       	breq	.+38     	; 0xc12 <__addsf3x+0x60>
 bec:	59 3f       	cpi	r21, 0xF9	; 249
 bee:	50 f4       	brcc	.+20     	; 0xc04 <__addsf3x+0x52>
 bf0:	50 3e       	cpi	r21, 0xE0	; 224
 bf2:	68 f1       	brcs	.+90     	; 0xc4e <__addsf3x+0x9c>
 bf4:	1a 16       	cp	r1, r26
 bf6:	f0 40       	sbci	r31, 0x00	; 0
 bf8:	a2 2f       	mov	r26, r18
 bfa:	23 2f       	mov	r18, r19
 bfc:	34 2f       	mov	r19, r20
 bfe:	44 27       	eor	r20, r20
 c00:	58 5f       	subi	r21, 0xF8	; 248
 c02:	f3 cf       	rjmp	.-26     	; 0xbea <__addsf3x+0x38>
 c04:	46 95       	lsr	r20
 c06:	37 95       	ror	r19
 c08:	27 95       	ror	r18
 c0a:	a7 95       	ror	r26
 c0c:	f0 40       	sbci	r31, 0x00	; 0
 c0e:	53 95       	inc	r21
 c10:	c9 f7       	brne	.-14     	; 0xc04 <__addsf3x+0x52>
 c12:	7e f4       	brtc	.+30     	; 0xc32 <__addsf3x+0x80>
 c14:	1f 16       	cp	r1, r31
 c16:	ba 0b       	sbc	r27, r26
 c18:	62 0b       	sbc	r22, r18
 c1a:	73 0b       	sbc	r23, r19
 c1c:	84 0b       	sbc	r24, r20
 c1e:	ba f0       	brmi	.+46     	; 0xc4e <__addsf3x+0x9c>
 c20:	91 50       	subi	r25, 0x01	; 1
 c22:	a1 f0       	breq	.+40     	; 0xc4c <__addsf3x+0x9a>
 c24:	ff 0f       	add	r31, r31
 c26:	bb 1f       	adc	r27, r27
 c28:	66 1f       	adc	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	c2 f7       	brpl	.-16     	; 0xc20 <__addsf3x+0x6e>
 c30:	0e c0       	rjmp	.+28     	; 0xc4e <__addsf3x+0x9c>
 c32:	ba 0f       	add	r27, r26
 c34:	62 1f       	adc	r22, r18
 c36:	73 1f       	adc	r23, r19
 c38:	84 1f       	adc	r24, r20
 c3a:	48 f4       	brcc	.+18     	; 0xc4e <__addsf3x+0x9c>
 c3c:	87 95       	ror	r24
 c3e:	77 95       	ror	r23
 c40:	67 95       	ror	r22
 c42:	b7 95       	ror	r27
 c44:	f7 95       	ror	r31
 c46:	9e 3f       	cpi	r25, 0xFE	; 254
 c48:	08 f0       	brcs	.+2      	; 0xc4c <__addsf3x+0x9a>
 c4a:	b0 cf       	rjmp	.-160    	; 0xbac <__addsf3+0x28>
 c4c:	93 95       	inc	r25
 c4e:	88 0f       	add	r24, r24
 c50:	08 f0       	brcs	.+2      	; 0xc54 <__addsf3x+0xa2>
 c52:	99 27       	eor	r25, r25
 c54:	ee 0f       	add	r30, r30
 c56:	97 95       	ror	r25
 c58:	87 95       	ror	r24
 c5a:	08 95       	ret

00000c5c <__cmpsf2>:
 c5c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_cmp>
 c60:	08 f4       	brcc	.+2      	; 0xc64 <__cmpsf2+0x8>
 c62:	81 e0       	ldi	r24, 0x01	; 1
 c64:	08 95       	ret

00000c66 <__fixsfsi>:
 c66:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fixunssfsi>
 c6a:	68 94       	set
 c6c:	b1 11       	cpse	r27, r1
 c6e:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 c72:	08 95       	ret

00000c74 <__fixunssfsi>:
 c74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_splitA>
 c78:	88 f0       	brcs	.+34     	; 0xc9c <__fixunssfsi+0x28>
 c7a:	9f 57       	subi	r25, 0x7F	; 127
 c7c:	98 f0       	brcs	.+38     	; 0xca4 <__fixunssfsi+0x30>
 c7e:	b9 2f       	mov	r27, r25
 c80:	99 27       	eor	r25, r25
 c82:	b7 51       	subi	r27, 0x17	; 23
 c84:	b0 f0       	brcs	.+44     	; 0xcb2 <__fixunssfsi+0x3e>
 c86:	e1 f0       	breq	.+56     	; 0xcc0 <__fixunssfsi+0x4c>
 c88:	66 0f       	add	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	1a f0       	brmi	.+6      	; 0xc98 <__fixunssfsi+0x24>
 c92:	ba 95       	dec	r27
 c94:	c9 f7       	brne	.-14     	; 0xc88 <__fixunssfsi+0x14>
 c96:	14 c0       	rjmp	.+40     	; 0xcc0 <__fixunssfsi+0x4c>
 c98:	b1 30       	cpi	r27, 0x01	; 1
 c9a:	91 f0       	breq	.+36     	; 0xcc0 <__fixunssfsi+0x4c>
 c9c:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_zero>
 ca0:	b1 e0       	ldi	r27, 0x01	; 1
 ca2:	08 95       	ret
 ca4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 ca8:	67 2f       	mov	r22, r23
 caa:	78 2f       	mov	r23, r24
 cac:	88 27       	eor	r24, r24
 cae:	b8 5f       	subi	r27, 0xF8	; 248
 cb0:	39 f0       	breq	.+14     	; 0xcc0 <__fixunssfsi+0x4c>
 cb2:	b9 3f       	cpi	r27, 0xF9	; 249
 cb4:	cc f3       	brlt	.-14     	; 0xca8 <__fixunssfsi+0x34>
 cb6:	86 95       	lsr	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	b3 95       	inc	r27
 cbe:	d9 f7       	brne	.-10     	; 0xcb6 <__fixunssfsi+0x42>
 cc0:	3e f4       	brtc	.+14     	; 0xcd0 <__fixunssfsi+0x5c>
 cc2:	90 95       	com	r25
 cc4:	80 95       	com	r24
 cc6:	70 95       	com	r23
 cc8:	61 95       	neg	r22
 cca:	7f 4f       	sbci	r23, 0xFF	; 255
 ccc:	8f 4f       	sbci	r24, 0xFF	; 255
 cce:	9f 4f       	sbci	r25, 0xFF	; 255
 cd0:	08 95       	ret

00000cd2 <__floatunsisf>:
 cd2:	e8 94       	clt
 cd4:	09 c0       	rjmp	.+18     	; 0xce8 <__floatsisf+0x12>

00000cd6 <__floatsisf>:
 cd6:	97 fb       	bst	r25, 7
 cd8:	3e f4       	brtc	.+14     	; 0xce8 <__floatsisf+0x12>
 cda:	90 95       	com	r25
 cdc:	80 95       	com	r24
 cde:	70 95       	com	r23
 ce0:	61 95       	neg	r22
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	99 23       	and	r25, r25
 cea:	a9 f0       	breq	.+42     	; 0xd16 <__floatsisf+0x40>
 cec:	f9 2f       	mov	r31, r25
 cee:	96 e9       	ldi	r25, 0x96	; 150
 cf0:	bb 27       	eor	r27, r27
 cf2:	93 95       	inc	r25
 cf4:	f6 95       	lsr	r31
 cf6:	87 95       	ror	r24
 cf8:	77 95       	ror	r23
 cfa:	67 95       	ror	r22
 cfc:	b7 95       	ror	r27
 cfe:	f1 11       	cpse	r31, r1
 d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <__floatsisf+0x1c>
 d02:	fa f4       	brpl	.+62     	; 0xd42 <__floatsisf+0x6c>
 d04:	bb 0f       	add	r27, r27
 d06:	11 f4       	brne	.+4      	; 0xd0c <__floatsisf+0x36>
 d08:	60 ff       	sbrs	r22, 0
 d0a:	1b c0       	rjmp	.+54     	; 0xd42 <__floatsisf+0x6c>
 d0c:	6f 5f       	subi	r22, 0xFF	; 255
 d0e:	7f 4f       	sbci	r23, 0xFF	; 255
 d10:	8f 4f       	sbci	r24, 0xFF	; 255
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	16 c0       	rjmp	.+44     	; 0xd42 <__floatsisf+0x6c>
 d16:	88 23       	and	r24, r24
 d18:	11 f0       	breq	.+4      	; 0xd1e <__floatsisf+0x48>
 d1a:	96 e9       	ldi	r25, 0x96	; 150
 d1c:	11 c0       	rjmp	.+34     	; 0xd40 <__floatsisf+0x6a>
 d1e:	77 23       	and	r23, r23
 d20:	21 f0       	breq	.+8      	; 0xd2a <__floatsisf+0x54>
 d22:	9e e8       	ldi	r25, 0x8E	; 142
 d24:	87 2f       	mov	r24, r23
 d26:	76 2f       	mov	r23, r22
 d28:	05 c0       	rjmp	.+10     	; 0xd34 <__floatsisf+0x5e>
 d2a:	66 23       	and	r22, r22
 d2c:	71 f0       	breq	.+28     	; 0xd4a <__floatsisf+0x74>
 d2e:	96 e8       	ldi	r25, 0x86	; 134
 d30:	86 2f       	mov	r24, r22
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	60 e0       	ldi	r22, 0x00	; 0
 d36:	2a f0       	brmi	.+10     	; 0xd42 <__floatsisf+0x6c>
 d38:	9a 95       	dec	r25
 d3a:	66 0f       	add	r22, r22
 d3c:	77 1f       	adc	r23, r23
 d3e:	88 1f       	adc	r24, r24
 d40:	da f7       	brpl	.-10     	; 0xd38 <__floatsisf+0x62>
 d42:	88 0f       	add	r24, r24
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__fp_cmp>:
 d4c:	99 0f       	add	r25, r25
 d4e:	00 08       	sbc	r0, r0
 d50:	55 0f       	add	r21, r21
 d52:	aa 0b       	sbc	r26, r26
 d54:	e0 e8       	ldi	r30, 0x80	; 128
 d56:	fe ef       	ldi	r31, 0xFE	; 254
 d58:	16 16       	cp	r1, r22
 d5a:	17 06       	cpc	r1, r23
 d5c:	e8 07       	cpc	r30, r24
 d5e:	f9 07       	cpc	r31, r25
 d60:	c0 f0       	brcs	.+48     	; 0xd92 <__fp_cmp+0x46>
 d62:	12 16       	cp	r1, r18
 d64:	13 06       	cpc	r1, r19
 d66:	e4 07       	cpc	r30, r20
 d68:	f5 07       	cpc	r31, r21
 d6a:	98 f0       	brcs	.+38     	; 0xd92 <__fp_cmp+0x46>
 d6c:	62 1b       	sub	r22, r18
 d6e:	73 0b       	sbc	r23, r19
 d70:	84 0b       	sbc	r24, r20
 d72:	95 0b       	sbc	r25, r21
 d74:	39 f4       	brne	.+14     	; 0xd84 <__fp_cmp+0x38>
 d76:	0a 26       	eor	r0, r26
 d78:	61 f0       	breq	.+24     	; 0xd92 <__fp_cmp+0x46>
 d7a:	23 2b       	or	r18, r19
 d7c:	24 2b       	or	r18, r20
 d7e:	25 2b       	or	r18, r21
 d80:	21 f4       	brne	.+8      	; 0xd8a <__fp_cmp+0x3e>
 d82:	08 95       	ret
 d84:	0a 26       	eor	r0, r26
 d86:	09 f4       	brne	.+2      	; 0xd8a <__fp_cmp+0x3e>
 d88:	a1 40       	sbci	r26, 0x01	; 1
 d8a:	a6 95       	lsr	r26
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	81 1d       	adc	r24, r1
 d90:	81 1d       	adc	r24, r1
 d92:	08 95       	ret

00000d94 <__fp_inf>:
 d94:	97 f9       	bld	r25, 7
 d96:	9f 67       	ori	r25, 0x7F	; 127
 d98:	80 e8       	ldi	r24, 0x80	; 128
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	08 95       	ret

00000da0 <__fp_nan>:
 da0:	9f ef       	ldi	r25, 0xFF	; 255
 da2:	80 ec       	ldi	r24, 0xC0	; 192
 da4:	08 95       	ret

00000da6 <__fp_pscA>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	18 06       	cpc	r1, r24
 db0:	09 06       	cpc	r0, r25
 db2:	08 95       	ret

00000db4 <__fp_pscB>:
 db4:	00 24       	eor	r0, r0
 db6:	0a 94       	dec	r0
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	05 06       	cpc	r0, r21
 dc0:	08 95       	ret

00000dc2 <__fp_round>:
 dc2:	09 2e       	mov	r0, r25
 dc4:	03 94       	inc	r0
 dc6:	00 0c       	add	r0, r0
 dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0xc>
 dca:	88 23       	and	r24, r24
 dcc:	52 f0       	brmi	.+20     	; 0xde2 <__fp_round+0x20>
 dce:	bb 0f       	add	r27, r27
 dd0:	40 f4       	brcc	.+16     	; 0xde2 <__fp_round+0x20>
 dd2:	bf 2b       	or	r27, r31
 dd4:	11 f4       	brne	.+4      	; 0xdda <__fp_round+0x18>
 dd6:	60 ff       	sbrs	r22, 0
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__fp_round+0x20>
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__fp_split3>:
 de4:	57 fd       	sbrc	r21, 7
 de6:	90 58       	subi	r25, 0x80	; 128
 de8:	44 0f       	add	r20, r20
 dea:	55 1f       	adc	r21, r21
 dec:	59 f0       	breq	.+22     	; 0xe04 <__fp_splitA+0x10>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	71 f0       	breq	.+28     	; 0xe0e <__fp_splitA+0x1a>
 df2:	47 95       	ror	r20

00000df4 <__fp_splitA>:
 df4:	88 0f       	add	r24, r24
 df6:	97 fb       	bst	r25, 7
 df8:	99 1f       	adc	r25, r25
 dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_splitA+0x20>
 dfc:	9f 3f       	cpi	r25, 0xFF	; 255
 dfe:	79 f0       	breq	.+30     	; 0xe1e <__fp_splitA+0x2a>
 e00:	87 95       	ror	r24
 e02:	08 95       	ret
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	f2 cf       	rjmp	.-28     	; 0xdf2 <__fp_split3+0xe>
 e0e:	46 95       	lsr	r20
 e10:	f1 df       	rcall	.-30     	; 0xdf4 <__fp_splitA>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__fp_splitA+0x30>
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	f1 cf       	rjmp	.-30     	; 0xe00 <__fp_splitA+0xc>
 e1e:	86 95       	lsr	r24
 e20:	71 05       	cpc	r23, r1
 e22:	61 05       	cpc	r22, r1
 e24:	08 94       	sec
 e26:	08 95       	ret

00000e28 <__fp_zero>:
 e28:	e8 94       	clt

00000e2a <__fp_szero>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	66 27       	eor	r22, r22
 e2e:	77 27       	eor	r23, r23
 e30:	cb 01       	movw	r24, r22
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__mulsf3>:
 e36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3x>
 e3a:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_round>
 e3e:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscA>
 e42:	38 f0       	brcs	.+14     	; 0xe52 <__mulsf3+0x1c>
 e44:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fp_pscB>
 e48:	20 f0       	brcs	.+8      	; 0xe52 <__mulsf3+0x1c>
 e4a:	95 23       	and	r25, r21
 e4c:	11 f0       	breq	.+4      	; 0xe52 <__mulsf3+0x1c>
 e4e:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 e52:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_nan>
 e56:	11 24       	eor	r1, r1
 e58:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>

00000e5c <__mulsf3x>:
 e5c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 e60:	70 f3       	brcs	.-36     	; 0xe3e <__mulsf3+0x8>

00000e62 <__mulsf3_pse>:
 e62:	95 9f       	mul	r25, r21
 e64:	c1 f3       	breq	.-16     	; 0xe56 <__mulsf3+0x20>
 e66:	95 0f       	add	r25, r21
 e68:	50 e0       	ldi	r21, 0x00	; 0
 e6a:	55 1f       	adc	r21, r21
 e6c:	62 9f       	mul	r22, r18
 e6e:	f0 01       	movw	r30, r0
 e70:	72 9f       	mul	r23, r18
 e72:	bb 27       	eor	r27, r27
 e74:	f0 0d       	add	r31, r0
 e76:	b1 1d       	adc	r27, r1
 e78:	63 9f       	mul	r22, r19
 e7a:	aa 27       	eor	r26, r26
 e7c:	f0 0d       	add	r31, r0
 e7e:	b1 1d       	adc	r27, r1
 e80:	aa 1f       	adc	r26, r26
 e82:	64 9f       	mul	r22, r20
 e84:	66 27       	eor	r22, r22
 e86:	b0 0d       	add	r27, r0
 e88:	a1 1d       	adc	r26, r1
 e8a:	66 1f       	adc	r22, r22
 e8c:	82 9f       	mul	r24, r18
 e8e:	22 27       	eor	r18, r18
 e90:	b0 0d       	add	r27, r0
 e92:	a1 1d       	adc	r26, r1
 e94:	62 1f       	adc	r22, r18
 e96:	73 9f       	mul	r23, r19
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	62 1f       	adc	r22, r18
 e9e:	83 9f       	mul	r24, r19
 ea0:	a0 0d       	add	r26, r0
 ea2:	61 1d       	adc	r22, r1
 ea4:	22 1f       	adc	r18, r18
 ea6:	74 9f       	mul	r23, r20
 ea8:	33 27       	eor	r19, r19
 eaa:	a0 0d       	add	r26, r0
 eac:	61 1d       	adc	r22, r1
 eae:	23 1f       	adc	r18, r19
 eb0:	84 9f       	mul	r24, r20
 eb2:	60 0d       	add	r22, r0
 eb4:	21 1d       	adc	r18, r1
 eb6:	82 2f       	mov	r24, r18
 eb8:	76 2f       	mov	r23, r22
 eba:	6a 2f       	mov	r22, r26
 ebc:	11 24       	eor	r1, r1
 ebe:	9f 57       	subi	r25, 0x7F	; 127
 ec0:	50 40       	sbci	r21, 0x00	; 0
 ec2:	9a f0       	brmi	.+38     	; 0xeea <__mulsf3_pse+0x88>
 ec4:	f1 f0       	breq	.+60     	; 0xf02 <__mulsf3_pse+0xa0>
 ec6:	88 23       	and	r24, r24
 ec8:	4a f0       	brmi	.+18     	; 0xedc <__mulsf3_pse+0x7a>
 eca:	ee 0f       	add	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	bb 1f       	adc	r27, r27
 ed0:	66 1f       	adc	r22, r22
 ed2:	77 1f       	adc	r23, r23
 ed4:	88 1f       	adc	r24, r24
 ed6:	91 50       	subi	r25, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	a9 f7       	brne	.-22     	; 0xec6 <__mulsf3_pse+0x64>
 edc:	9e 3f       	cpi	r25, 0xFE	; 254
 ede:	51 05       	cpc	r21, r1
 ee0:	80 f0       	brcs	.+32     	; 0xf02 <__mulsf3_pse+0xa0>
 ee2:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__fp_inf>
 ee6:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 eea:	5f 3f       	cpi	r21, 0xFF	; 255
 eec:	e4 f3       	brlt	.-8      	; 0xee6 <__mulsf3_pse+0x84>
 eee:	98 3e       	cpi	r25, 0xE8	; 232
 ef0:	d4 f3       	brlt	.-12     	; 0xee6 <__mulsf3_pse+0x84>
 ef2:	86 95       	lsr	r24
 ef4:	77 95       	ror	r23
 ef6:	67 95       	ror	r22
 ef8:	b7 95       	ror	r27
 efa:	f7 95       	ror	r31
 efc:	e7 95       	ror	r30
 efe:	9f 5f       	subi	r25, 0xFF	; 255
 f00:	c1 f7       	brne	.-16     	; 0xef2 <__mulsf3_pse+0x90>
 f02:	fe 2b       	or	r31, r30
 f04:	88 0f       	add	r24, r24
 f06:	91 1d       	adc	r25, r1
 f08:	96 95       	lsr	r25
 f0a:	87 95       	ror	r24
 f0c:	97 f9       	bld	r25, 7
 f0e:	08 95       	ret

00000f10 <_exit>:
 f10:	f8 94       	cli

00000f12 <__stop_program>:
 f12:	ff cf       	rjmp	.-2      	; 0xf12 <__stop_program>
